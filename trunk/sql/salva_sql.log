CREATE TABLE userstatus ( 
    id serial NOT NULL,
    name text NOT NULL,
    PRIMARY KEY (id),
    UNIQUE(name)
);
CREATE TABLE
COMMENT ON TABLE userstatus IS
	'Estado de cada uno de los usuarios';
COMMENT
CREATE TABLE userlevels (
    id int2 NOT NULL,
    name text NOT NULL,
    PRIMARY KEY (id),
    UNIQUE(name)
);
CREATE TABLE
COMMENT ON TABLE userlevels IS
	'Grupos (tipos) de usuario del sistema';
COMMENT
CREATE TABLE secretquestion ( 
    id int2 NOT NULL,
    name text,
    PRIMARY KEY (id),
    UNIQUE(name)
);
CREATE TABLE
COMMENT ON TABLE secretquestion IS
	'Preguntas secretas que pueden ser usadas (junto la respuesta secreta
	provista por cada usuario) para recuperar una contraseña';
COMMENT
CREATE TABLE users ( 
    id SERIAL NOT NULL,
    login text NOT NULL,
    passwd text NOT NULL,
    userstatus_id int4 NOT NULL 
            REFERENCES userstatus(id)
            ON UPDATE CASCADE
            DEFERRABLE
	    DEFAULT 1,
    userlevel_id int4 NOT NULL
	    REFERENCES userlevels(id)
	    ON UPDATE CASCADE
	    DEFERRABLE
	    DEFAULT 1,
    secretquestion_id int4 NULL 
           REFERENCES secretquestion(id)
           ON UPDATE CASCADE
           DEFERRABLE,
    secretanswer text NULL,
    email text NULL, 
    pkcs7 text NULL,
    session char(32) NULL,
    session_exp timestamp DEFAULT now()+'3 hr'::interval NULL,
    dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    UNIQUE(login),
    UNIQUE(session)
);
CREATE TABLE
CREATE INDEX users_id_idx ON users(id);
CREATE INDEX
CREATE INDEX users_name_idx ON users(login);
CREATE INDEX
COMMENT ON TABLE users IS
	'Usuarios del sistema';
COMMENT
COMMENT ON COLUMN users.email IS 
	'El correo será utilizado para la recuperación de contraseñas o 
	notificación de cambios generados por terceros';
COMMENT
COMMENT ON COLUMN users.pkcs7 IS 
	'A ser utilizado con infraestructura PKI';
COMMENT
CREATE TABLE countries ( 
    	id serial NOT NULL,
    	name text NOT NULL,
	citizen text NOT NULL,
	code char(3) NOT NULL, 
	PRIMARY KEY(id),
	UNIQUE(name),
	UNIQUE(citizen),
	UNIQUE(code)
);
CREATE TABLE
COMMENT ON TABLE countries IS
	'Listado de países';
COMMENT
COMMENT ON COLUMN countries.name IS
	'Nombre del país';
COMMENT
COMMENT ON COLUMN countries.citizen IS
	'Gentilicio de los ciudadanos del país';
COMMENT
COMMENT ON COLUMN countries.code IS
	'Abreviación (3 letras) del país';
COMMENT
CREATE TABLE states (
	id SERIAL,
	country_id int4 NOT NULL
		REFERENCES countries(id)
		ON UPDATE CASCADE
		DEFERRABLE,
	name text NOT NULL,
        moduser_id int4 NULL    	     
            REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
	PRIMARY KEY(id),
	UNIQUE(name)
);
CREATE TABLE
COMMENT ON TABLE states IS
	'Lista de estados';
COMMENT
CREATE TABLE userrole ( 
    	id SERIAL NOT NULL,
   	name text NOT NULL,
        moduser_id int4 NULL    	     
            REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
    	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE userrole IS
	'Rol que juega un usuario en diferentes tablas genéricas 
	(usergenericworks, usertechproducts, userotheractivities)';
COMMENT
CREATE TABLE articlestatus (  
	id SERIAL, 
	name varchar(50) NOT NULL,
	PRIMARY KEY (id),
	UNIQUE(name)
);
CREATE TABLE
COMMENT ON TABLE articlestatus IS
	'Estado de un artículo (utilizado en articles y newspaperarticles)';
COMMENT
CREATE TABLE mediatype ( 
    id SERIAL, 
    name text NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE mediatype IS
	'Medio físico en el que un trabajo está publicado';
COMMENT
CREATE TABLE publishers ( 
	id SERIAL,
	name text NOT NULL,
        moduser_id int4 NULL    	     
            REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE(name)
);
CREATE TABLE
COMMENT ON TABLE publishers IS
	'Editoriales';
COMMENT
CREATE TABLE modality (
    id SERIAL,  
    name text NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE modality IS 
	'Modalidad en que es impartido un curso o de una ponencia';
COMMENT
CREATE TABLE menuelem (
	id SERIAL,
	label text NOT NULL,
	parentmenuelem_id int4 NULL
		REFERENCES menuelem(id)
		ON UPDATE CASCADE
		DEFERRABLE,
	userlevel_id int4 NOT NULL
		REFERENCES userlevels(id)
		ON UPDATE CASCADE
		DEFERRABLE,
	ordering int4 NOT NULL,
	iconopen text NULL,
	iconclosed text NULL,
	iconpath text NULL,
	style text NULL,
	action text NULL,
	target text NULL,
	expanded bool DEFAULT 'f' NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (label, parentmenuelem_id)
);
CREATE TABLE
COMMENT ON TABLE menuelem IS
	'Cada uno de los elementos del menú que se muestra al usuario';
COMMENT
COMMENT ON COLUMN menuelem.parentmenuelem_id IS
	'ID del elemento padre - NULL siginfica que está sobre la raiz';
COMMENT
COMMENT ON COLUMN menuelem.userlevel_id IS
	'Nivel mínimo de usuario que tiene derecho de ver este elemento';
COMMENT
COMMENT ON COLUMN menuelem.expanded IS
	'Si tiene sub-elementos, expanded indica si por default los mostramos o no';
COMMENT
COMMENT ON COLUMN menuelem.ordering IS
	'Dentro de su árbol, el órden relativo en que aparece este elemento. Si hay más
	de un elemento con el mismo nivel de ordenamiento, se muestran por órden de ID';
COMMENT
COMMENT ON COLUMN menuelem.style IS
	'';
COMMENT
COMMENT ON COLUMN menuelem.action IS
	'';
COMMENT
COMMENT ON COLUMN menuelem.target IS
	'';
COMMENT
CREATE TABLE institutiontype (
	id SERIAL,
	name text NOT NULL,  
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE institutiontype IS
	'Tipos de institución';
COMMENT
CREATE TABLE institutiontitles (
	id SERIAL,
	name text NOT NULL,  
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE institutiontitles IS
	'Título (tipo, primer elemento del nombre) de una institución';
COMMENT
CREATE TABLE institutions (  
        id SERIAL,
        name text NOT NULL,
        url  text NULL,
        abbrev text NULL,
        state int4 NULL
		REFERENCES states(id)
		ON UPDATE CASCADE
		DEFERRABLE,
        other text NULL,
	parent_id integer NULL
            	REFERENCES institutions(id) 
            	ON UPDATE CASCADE           
            	ON DELETE CASCADE           
            	DEFERRABLE,
	country_id int4 NOT NULL 
            	REFERENCES countries(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
	institutiontype_id int4 NOT NULL
            	REFERENCES institutiontype(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
	institutiontitle_id int4 NOT NULL
            	REFERENCES institutiontitles(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
	administrative_id text NULL,
        moduser_id int4 NULL    
            REFERENCES users(id)    
            ON UPDATE CASCADE       
            DEFERRABLE,
        PRIMARY KEY(id),
	UNIQUE(name, country_id, state) 
);
CREATE TABLE
COMMENT ON TABLE institutions IS
	'Instituciones';
COMMENT
COMMENT ON COLUMN institutions.parent_id IS
	'Institución padre, para expresar jerarquías (p.ej. UNAM es la 
	institución padre de IIEc)';
COMMENT
COMMENT ON COLUMN institutions.administrative_id IS
	'Si la institución tiene alguna clave en su institución padre, la 
	indicamos aquí. Lo guardamos sólo como texto, no buscamos la integridad
	referencial';
COMMENT
CREATE TABLE goals (
        id SERIAL,
        name text NOT NULL, 
	moduser_id int4 NULL    
            REFERENCES users(id)    
            ON UPDATE CASCADE       
            DEFERRABLE,
        PRIMARY KEY(id),
	UNIQUE(name) 
);
CREATE TABLE
COMMENT ON TABLE goals IS
	'Una institución existe para cumplir ciertas metas - ¿cuáles? (tan
	genérico como sea posible)';
COMMENT
CREATE TABLE institutionsgoals (
	id SERIAL,
	institution_id int4 NOT NULL 
            	REFERENCES institutions(id) 
            	ON UPDATE CASCADE           
            	ON DELETE CASCADE           
            	DEFERRABLE,
	goal_id int4 NOT NULL 
            	REFERENCES goals(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
        moduser_id int4 NULL    
            REFERENCES users(id)    
            ON UPDATE CASCADE       
            DEFERRABLE,
        PRIMARY KEY(id),
	UNIQUE (institution_id, goal_id)
);
CREATE TABLE
COMMENT ON TABLE institutionsgoals IS
	'Relación entre cada una de las instituciones y las metas';
COMMENT
CREATE TABLE maritalstatus ( 
    	id serial NOT NULL,
    	name text NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE maritalstatus IS
	'Estado civil';
COMMENT
CREATE TABLE addresstype ( 
	id serial NOT NULL,
   	name text NOT NULL,
   	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE addresstype IS
	'Tipo de dirección';
COMMENT
CREATE TABLE personalidtype ( 
        id SERIAL,
        name text NOT NULL,
        PRIMARY KEY(id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE personalidtype IS
	'Tipo de (documento de) identificación';
COMMENT
CREATE TABLE migratorystatus (
	id SERIAL,
	name text NOT NULL,
	PRIMARY KEY (id), 
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE migratorystatus IS
	'Status migratorio de un extranjero';
COMMENT
CREATE TABLE personal ( 
    uid int4 NOT NULL 
            REFERENCES users(id)
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
    firstname text NOT NULL,
    lastname1 text NOT NULL,
    lastname2 text NULL,
    sex boolean NOT NULL,
    dateofbirth date NOT NULL,
    birthcountry_id int4 NOT NULL 
                         REFERENCES countries(id)
                         ON UPDATE CASCADE
                         DEFERRABLE,
    birthcity text NOT NULL,
    birthstate int4 NULL
			REFERENCES states(id)
			ON UPDATE CASCADE
			DEFERRABLE,
    maritstat_id int4 NOT NULL 
                           REFERENCES maritalstatus(id)
                           ON UPDATE CASCADE
                           DEFERRABLE,
    photo bytea NULL,
    other text NULL,
    dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (uid)
);
CREATE TABLE
CREATE INDEX "personal_firstname_idx" ON personal(firstname);
CREATE INDEX
CREATE INDEX "personal_lastname1_idx" ON personal(lastname1);
CREATE INDEX
CREATE INDEX "personal_lastname2_idx" ON personal(lastname2);
CREATE INDEX
CREATE UNIQUE INDEX "personal_firstname_lastname1_lastname2_idx" ON personal(upper(firstname), upper(lastname1), upper(lastname2), dateofbirth);
CREATE INDEX
COMMENT ON TABLE personal IS
	'Datos personales del usuario';
COMMENT
CREATE TABLE personalid ( 
   uid int4 NOT NULL 
   	   REFERENCES users(id)
           ON UPDATE CASCADE
           ON DELETE CASCADE   
           DEFERRABLE,
   personalidtype_id int4 
   	   REFERENCES personalidtype(id)
           ON UPDATE CASCADE
           DEFERRABLE,
   content text NULL,
   dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
   PRIMARY KEY (uid)
);
CREATE TABLE
COMMENT ON TABLE personalid IS
	'Cada una de las identificaciones de un usuario';
COMMENT
CREATE TABLE address ( 
    uid int4 NOT NULL 
            REFERENCES users(id)
            ON UPDATE CASCADE
            ON DELETE CASCADE
            DEFERRABLE,
    addrtype_id int4 NOT NULL 
            REFERENCES addresstype(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    country_id int4 NOT NULL 
              REFERENCES countries(id)
              ON UPDATE CASCADE
              DEFERRABLE,
    postaddress text NOT NULL, 
    state int4 NULL
		REFERENCES states(id)
		ON UPDATE CASCADE
		DEFERRABLE,
    city text NOT NULL,
    zipcode int4 NULL,
    phone text NULL,
    fax text NULL,
    movil text NULL,
    other text NULL,
    mail bool DEFAULT 'f' NOT NULL,
    dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (uid, addrtype_id)
);
CREATE TABLE
COMMENT ON TABLE address IS
	'Las direcciones postales de un usuario';
COMMENT
CREATE TABLE usercitizen ( 
  uid int4 NOT NULL 
	   REFERENCES users(id)
	   ON UPDATE CASCADE
           ON DELETE CASCADE
	   DEFERRABLE,
  citizen_id int4 NOT NULL
	   REFERENCES countries(id)
	   ON UPDATE CASCADE
           DEFERRABLE,
  migratorystatus_id int4 NULL REFERENCES migratorystatus(id)
	   ON UPDATE CASCADE
	   DEFERRABLE,
  passport text NULL,
  dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (uid, citizen_id)
);
CREATE TABLE
COMMENT ON TABLE usercitizen IS
	'Nacionalidades que tiene un usuario';
COMMENT
CREATE TABLE usermembership ( 
  uid int4 NOT NULL 
	   REFERENCES users(id)
	   ON UPDATE CASCADE
           ON DELETE CASCADE
	   DEFERRABLE,
  institution_id int4 NOT NULL
	   REFERENCES institutions(id)
	   ON UPDATE CASCADE
           DEFERRABLE,
  startyear int4 NULL,
  endyear int4 NULL,
  dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (uid, institution_id)
);
CREATE TABLE
COMMENT ON TABLE usermembership IS
	'Instituciones académicas a las que pertenece un usuario';
COMMENT
CREATE TABLE gotdegreetype( 
	id SERIAL NOT NULL,
	name char(30) NOT NULL,     
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE gotdegreetype IS
	'Modalidad de titulación por medio de la cual alguien puede graduarse';
COMMENT
CREATE TABLE academicdegrees ( 
	id SERIAL NOT NULL,           
    	name text NOT NULL,
    	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE academicdegrees IS
	'Lista de grados académicos';
COMMENT
CREATE TABLE subtitles (
	id SERIAL,
	name text NULL,
	abbrev text NULL,
	moduser_id int4 NULL    
        	   REFERENCES users(id)    
           	ON UPDATE CASCADE       
            	DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE subtitles IS
	'Título que obtiene una persona al titularse de determinada carrera';
COMMENT
CREATE TABLE academiccareers (
	id SERIAL,
        name text NOT NULL,
        moduser_id int4 NULL    
            REFERENCES users(id)    
            ON UPDATE CASCADE       
            DEFERRABLE,
        PRIMARY KEY(id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE academiccareers IS
	'Listado de carreras';
COMMENT
CREATE TABLE institutionsacadcareers (
	id SERIAL,
        url  text NULL,
        abbrev text NULL,
        other text NULL,
	institution_id int4 NOT NULL 
            	REFERENCES institutions(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
	academiccareer_id int4 NOT NULL 
            	REFERENCES academiccareers(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
	academicdegree_id int4 NOT NULL 
            	REFERENCES academicdegrees(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
        moduser_id int4 NULL    
            REFERENCES users(id)    
            ON UPDATE CASCADE       
            DEFERRABLE,
        PRIMARY KEY(id),
	UNIQUE (institution_id, academiccareer_id)
);
CREATE TABLE
COMMENT ON TABLE institutionsacadcareers IS
	'Institución a la que pertenece cada una de las carreras de 
	academiccareers';
COMMENT
CREATE TABLE schooling (
    id SERIAL,
    uid int4 NOT NULL 
            REFERENCES users(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
    institutionacadcareer_id int4 NOT NULL 
            REFERENCES institutionsacadcareers(id)       
            ON UPDATE CASCADE
            DEFERRABLE,
    subtitle_id int4 NOT NULL 
            REFERENCES subtitles(id)       
            ON UPDATE CASCADE
            DEFERRABLE,
    startyear int4 NOT NULL,
    endyear   int4 NULL,
    studentid text NULL,
    titleholder bool DEFAULT 'f' NOT NULL,
    other text NULL,
    credits int4 NULL
		CHECK (credits >= 0 AND credits <= 100),
    moduser_id int4 NULL    
           REFERENCES users(id)    
            ON UPDATE CASCADE       
            DEFERRABLE,
    PRIMARY KEY (id),
    UNIQUE (uid,  institutionacadcareer_id),
    CONSTRAINT choose_credits_or_year CHECK 
	(endyear IS NULL OR credits IS NULL OR credits = 100),
    CONSTRAINT valid_period CHECK (startyear < endyear)
);
CREATE TABLE
COMMENT ON TABLE schooling IS
	'Los diferentes pasos (grados) en la historia académica de un usuario';
COMMENT
COMMENT ON COLUMN schooling.endyear IS
	'Año de egreso';
COMMENT
COMMENT ON COLUMN schooling.studentid IS
	'Matrícula';
COMMENT
COMMENT ON COLUMN schooling.titleholder IS
	'¿Es ya titulado? (endyear marca únicamente egreso)';
COMMENT
COMMENT ON COLUMN schooling.credits IS
	'Porcentaje de créditos - No se reporta si ya egresó (endyear) ';
COMMENT
CREATE TABLE titlesholding (
	id SERIAL,
        schoolinghistory_id integer NOT NULL 
             REFERENCES schooling(id) 
             ON UPDATE CASCADE            
             DEFERRABLE,
        gotdegreetype_id integer NOT NULL
             REFERENCES gotdegreetype(id)
             ON UPDATE CASCADE                 
             DEFERRABLE,
	professionalid text NULL,
    	year int4 NULL,
	thesistitle text NULL,
        moduser_id int4 NULL    
            REFERENCES users(id)    
            ON UPDATE CASCADE       
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (schoolinghistory_id)
);
CREATE TABLE
COMMENT ON TABLE titlesholding IS
	'El usuario está ya titulado (de cada uno de los grados reportados en
	schooling)? Aquí van los datos de la titulación';
COMMENT
COMMENT ON COLUMN titlesholding.professionalid IS
	'Cédula profesional';
COMMENT
COMMENT ON COLUMN titlesholding.year IS
	'Año de titulación';
COMMENT
CREATE TABLE externaluserlevels ( 
	id SERIAL,
	name text NOT NULL, 
	UNIQUE (name),
  	PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE externaluserlevels IS
	'Nivel de una persona (usuario externo) en su institución';
COMMENT
CREATE TABLE externalusers ( 
    id SERIAL,
    firstname text NOT NULL,
    lastname1 text NOT NULL,
    lastname2 text NULL,
    institution_id integer NULL 
	    REFERENCES institutions(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    externaluserlevel_id integer NULL
	    REFERENCES externaluserlevels(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    academicdegrees_id integer NULL
	    REFERENCES academicdegrees(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    PRIMARY KEY (id)
);
CREATE TABLE
CREATE INDEX externalusers_firstname_idx ON externalusers(firstname);
CREATE INDEX
CREATE INDEX externalusers_lastname1_idx ON externalusers(lastname1);
CREATE INDEX
CREATE INDEX externalusers_lastname2_idx ON externalusers(lastname2);
CREATE INDEX
CREATE INDEX externalusers_firstname_lastname1_lastname2_idx ON externalusers(firstname, lastname1, lastname2);
CREATE INDEX
COMMENT ON TABLE externalusers IS
	'Datos registrados de un usuario externo - Nombre e institución';
COMMENT
CREATE TABLE languages (
	id serial,
	name text NOT NULL,
	moduser_id int4 NULL  
             REFERENCES users(id) 
               ON UPDATE CASCADE  
               DEFERRABLE,
	PRIMARY KEY(id), 
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE languages IS
	'Idiomas';
COMMENT
CREATE TABLE userlanguages (
	id serial,
	uid int4 NOT NULL  
        	REFERENCES users(id)
            	ON UPDATE CASCADE
	        ON DELETE CASCADE       
		DEFERRABLE,
	languages_id int4 NOT NULL  
        	REFERENCES languages(id)
            	ON UPDATE CASCADE
		DEFERRABLE,
	spokenpercentage int4 NULL, 
	writtenpercentaje int4 NULL, 
	comment text NULL,
	PRIMARY KEY(id)
);
CREATE TABLE
COMMENT ON TABLE userlanguages IS
	'Relación de usuarios con lenguajes, indicando nivel de manejo';
COMMENT
COMMENT ON COLUMN userlanguages.comment IS
	'P.ej. indicando el curso o la institución donde lo aprendió';
COMMENT
CREATE TABLE publicationcategories ( 
	id SERIAL,
	name varchar(50) NOT NULL,
        moduser_id int4  NULL    	     
            REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE(name)
);
CREATE TABLE
COMMENT ON TABLE publicationcategories IS 
	'Áreas del conocimiento a los que responde una revista';
COMMENT
CREATE TABLE magazinetype ( 
	id SERIAL,
	name varchar(50) NOT NULL,
	PRIMARY KEY (id),
	UNIQUE(name)
);
CREATE TABLE
COMMENT ON TABLE magazinetype IS
	'Tipo de revista que publica (arbitrada/no arbitrada)';
COMMENT
CREATE TABLE magazines (
        id SERIAL,
        name text NOT NULL,
	issn text NULL,
        url  text NULL,
        abbrev text NULL,      
        other text NULL,           
	totalcites integer NULL,
	impactfactor float NULL, 	
	immediacy   text NULL,
	dateupdate date NULL, 
	magazinetype_id int4 NOT NULL 
            	REFERENCES magazinetype(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
	mediatype_id int4 NOT NULL 
            	REFERENCES mediatype(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
	publisher_id int4 NOT NULL 
            	REFERENCES publishers(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
	country_id int4 NOT NULL 
            	REFERENCES countries(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
        moduser_id int4 NULL    
            REFERENCES users(id)    
            ON UPDATE CASCADE       
            DEFERRABLE,
        PRIMARY KEY(id),
	UNIQUE(issn) 
);
CREATE TABLE
COMMENT ON TABLE magazines IS
	'Revistas en las cuales pueden publicarse artículos';
COMMENT
COMMENT ON COLUMN magazines.dateupdate IS
	'Fecha en que fué actualizado el factor de impacto/inmediatez';
COMMENT
CREATE TABLE magazinepublicationcategory ( 
	id SERIAL,
	magazine_id int4 NOT NULL 
            REFERENCES magazines(id)      
            ON UPDATE CASCADE
            DEFERRABLE,
    	publicationcategory_id int4 NOT NULL 
            REFERENCES publicationcategories(id)      
            ON UPDATE CASCADE
            DEFERRABLE,
        moduser_id int4 NULL    	     
            REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE(magazine_id, publicationcategory_id)
);
CREATE TABLE
COMMENT ON TABLE magazinepublicationcategory IS
	'Categorías (áreas del conocimiento) a las que pertenece una revista';
COMMENT
CREATE TABLE roleinmagazine (
	id serial,
	name text NOT NULL,
	PRIMARY KEY(id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE roleinmagazine IS
	'Roles que un usuario puede tener en una publicación';
COMMENT
CREATE TABLE usermagazines ( 
	id SERIAL,
    	uid int4 NOT NULL 
        	REFERENCES users(id)      
            	ON UPDATE CASCADE
            	ON DELETE CASCADE   
            	DEFERRABLE,
	magazine_id int4 NOT NULL 
        	REFERENCES magazines(id)
            	ON UPDATE CASCADE
            	DEFERRABLE,
	roleinmagazine_id int4 NOT NULL 
        	REFERENCES roleinmagazine(id)
            	ON UPDATE CASCADE
            	DEFERRABLE,
	startyear int4 NOT NULL,
	startmonth int4 NULL CHECK (startmonth >= 1 AND startmonth <= 12),
	endyear   int4 NULL,
	endmonth int4 NULL CHECK (endmonth >=1 AND endmonth <= 12),
	numcites int4 NULL CHECK (numcites >= 0),
	other text NULL,
	dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (id),
	CONSTRAINT valid_duration CHECK (endyear IS NULL OR
	       (startyear * 12 + coalesce(startmonth,0)) > (endyear * 12 + coalesce(endmonth,0)))
);
CREATE TABLE
COMMENT ON TABLE usermagazines IS
	'Relación entre usuarios del sistema y las publicaciones';
COMMENT
COMMENT ON COLUMN usermagazines.roleinmagazine_id IS
	'Es el rol que tiene el usuario en la publicación';
COMMENT
CREATE TABLE articles ( 
    id SERIAL,
    title text NOT NULL,
    pages text NULL,   
    year  int4 NOT NULL,
    month  int4 NULL CHECK (month >= 1 AND month <= 12),
    vol text NULL,
    num text NULL,
    authors text NULL ,
    url text NULL,
    pacsnum text NULL,
    artstatus_id int4 NOT NULL  
            REFERENCES articlestatus(id)      
            ON UPDATE CASCADE
            DEFERRABLE,
    magazine_id int4 NOT NULL 
            REFERENCES magazines(id)      
            ON UPDATE CASCADE
            DEFERRABLE,
    moduser_id int4 NULL         
            REFERENCES users(id) 
            ON UPDATE CASCADE    
            DEFERRABLE,
    other text NULL,
    PRIMARY KEY (id),
    UNIQUE(title, magazine_id, year)
);
CREATE TABLE
COMMENT ON TABLE articles IS
	'Datos de un artículo publicado';
COMMENT
COMMENT ON COLUMN articles.authors IS
	'Listado de autores tal cual aparece en el artículo - La relación 
	entre usuarios y artículos es independiente de esta, ver 
	authorarticles.';
COMMENT
CREATE TABLE authorarticles ( 
    id SERIAL,
    uid int4 NOT NULL 
            REFERENCES users(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
    article_id int4 NOT NULL 
            REFERENCES articles(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    ismainauthor BOOLEAN NOT NULL default 't',
    other text NULL,
    dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (uid, article_id)
);
CREATE TABLE
COMMENT ON TABLE authorarticles IS
	'Relación entre usuarios del sistema y artículos';
COMMENT
COMMENT ON COLUMN authorarticles.ismainauthor IS
	'Basta con señalar si el usuario es autor principal o es coautor';
COMMENT
CREATE TABLE articleslog (
    id SERIAL, 
    article_id integer NOT NULL 
            REFERENCES articles(id)
            ON UPDATE CASCADE
            ON DELETE CASCADE
            DEFERRABLE,
    artstatus_id integer NOT NULL 
            REFERENCES articlestatus(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    changedate date NOT NULL default now()::date,
    moduser_id integer NULL      
            REFERENCES users(id) 
            ON UPDATE CASCADE    
            DEFERRABLE,
    dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE articleslog IS
	'Estado actual (y bitácora) de un artículo - Cuándo fue enviado, 
	cuándo fue aceptado, etc.';
COMMENT
CREATE TABLE filesarticles (
   id serial NOT NULL,
   article_id int4 NOT NULL
            REFERENCES articles(id)
            ON UPDATE CASCADE
            DEFERRABLE,
   filename text NOT NULL,
   filedescr text NULL,
   content bytea NOT NULL,
   creationtime timestamp NOT NULL DEFAULT now(),
   lastmodiftime timestamp NOT NULL DEFAULT now(),
   moduser_id int4 NULL      
            REFERENCES users(id) 
            ON UPDATE CASCADE    
            DEFERRABLE,
    dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    UNIQUE (article_id, filename)
);
CREATE TABLE
COMMENT ON TABLE filesarticles IS
	'Archivos relacionados a los artículos';
COMMENT
COMMENT ON COLUMN filesarticles.article_id IS
	'ID del artículo referenciado';
COMMENT
COMMENT ON COLUMN filesarticles.content IS
	'Contenido (binario) del archivo';
COMMENT
CREATE TABLE researchareas(
    id SERIAL,
    name text NOT NULL,
    description text NULL,
    moduser_id int4 NULL                 
            REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
    PRIMARY KEY (id),
    UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE researchareas IS
	'Áreas de investigación (ligadas desde projectresearchareas)';
COMMENT
CREATE TABLE researchlines(
    id SERIAL,
    name text NOT NULL,
    description text NULL,
    moduser_id int4 NULL                 
            REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
    PRIMARY KEY (id),
    UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE researchlines IS
	'Líneas de investigación';
COMMENT
CREATE TABLE userresearchlines(
    id SERIAL,
    uid int4 NOT NULL
            REFERENCES users(id)     
            ON UPDATE CASCADE   
            ON DELETE CASCADE  
            DEFERRABLE,
    researchlines_id int4 NOT NULL
            REFERENCES researchlines(id)     
            ON UPDATE CASCADE   
            DEFERRABLE,
    PRIMARY KEY (uid, researchlines_id)
);
CREATE TABLE
COMMENT ON TABLE userresearchlines IS
	'Líneas de investigación en que participa un usuario';
COMMENT
CREATE TABLE attendeetype ( 
        id SERIAL,
        name text NOT NULL, 
        PRIMARY KEY(id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE attendeetype IS
	'Rol de un usuario en un congreso';
COMMENT
CREATE TABLE conferencetypes ( 
        id SERIAL,
        name text NOT NULL,
        PRIMARY KEY(id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE conferencetypes IS
	'Tipos de congreso';
COMMENT
CREATE TABLE conferencescope ( 
        id SERIAL,
        name text NOT NULL,
        PRIMARY KEY(id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE conferencescope IS 
	'Ámbito del congreso';
COMMENT
CREATE TABLE talktype ( 
        id SERIAL,
        name text NOT NULL,
        PRIMARY KEY(id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE talktype IS
	'Tipo de ponencia';
COMMENT
CREATE TABLE conferences ( 
    id SERIAL,
    name text NOT NULL,
    url text NULL,
    month int4 NULL CHECK (month >= 1 AND month <= 12),
    year  int4 NOT NULL,
    conferencetype_id integer NOT NULL
                         REFERENCES conferencetypes(id)
                         ON UPDATE CASCADE
                         DEFERRABLE,
    country_id smallint NOT NULL 
                         REFERENCES countries(id)
                         ON UPDATE CASCADE
                         DEFERRABLE,
    conferencescope_id smallint NOT NULL 
                         REFERENCES conferencescope(id)
                         ON UPDATE CASCADE
                         DEFERRABLE,
    location text NULL,
    uid int4 NOT NULL                        
            REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
    PRIMARY KEY (id),
    UNIQUE (name, year, country_id)
);
CREATE TABLE
COMMENT ON TABLE conferences IS
	'Congresos';
COMMENT
COMMENT ON COLUMN conferences.location IS
	'En qué parte/región del país es este congreso';
COMMENT
CREATE TABLE conferenceinstitutions ( 
    conference_id int4 NOT NULL 
            REFERENCES conferences(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE
            DEFERRABLE,
    institution_id int4 NOT NULL 
            REFERENCES institutions(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
    PRIMARY KEY (institution_id, conference_id)
);
CREATE TABLE
COMMENT ON TABLE conferenceinstitutions IS
	'Instituciones que organizan este congreso';
COMMENT
CREATE TABLE userconferences ( 
    id SERIAL,
    conference_id int4 NOT NULL 
            REFERENCES conferences(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE
            DEFERRABLE,
    uid int4 NOT NULL 
            REFERENCES users(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
    UNIQUE (uid, conference_id),
    PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE userconferences IS
	'Usuarios que asistieron a un congreso (su rol aparece en 
	userconferencerole)';
COMMENT
CREATE TABLE talkacceptance (
       id SERIAL,
        name text NOT NULL,
        PRIMARY KEY(id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE talkacceptance IS
	'Cómo fue la inscripción/aceptación de la ponencia en el congreso?';
COMMENT
CREATE TABLE conferencetalks (
    id SERIAL,
    conference_id integer NOT NULL
            REFERENCES conferences(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE
            DEFERRABLE,
    talktype_id integer NOT NULL
            REFERENCES talktype(id)      
            ON UPDATE CASCADE
            DEFERRABLE,
    talkacceptance_id integer NOT NULL
            REFERENCES talkacceptance(id)      
            ON UPDATE CASCADE
            DEFERRABLE,
    modality_id int4 NOT NULL 
            REFERENCES modality(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    title text NOT NULL,
    authors text NOT NULL,
    abstract text NULL,
    UNIQUE (conference_id, title, authors),
    PRIMARY KEY (id)    
);
CREATE TABLE
COMMENT ON TABLE conferencetalks IS
	'Las pláticas que forman parte de un congreso';
COMMENT
COMMENT ON COLUMN articles.authors IS
	'Listado de autores tal cual aparece en la ponencia - La 
	relación entre usuarios y ponencias es independiente de esta, ver 
	userconferencerole.';
COMMENT
CREATE TABLE userconferencerole (
    id SERIAL,
    userconference_id integer NOT NULL 
	    REFERENCES userconferences(id)
	    ON UPDATE CASCADE
	    ON DELETE CASCADE
	    DEFERRABLE,
    attendeetype_id int4 NOT NULL 
            REFERENCES attendeetype(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    conferencetalk_id integer NULL
	    REFERENCES conferencetalks(id)
	    ON UPDATE CASCADE
	    ON DELETE CASCADE
	    DEFERRABLE,
    comments text NULL,
    PRIMARY KEY (id),
    UNIQUE (userconference_id, attendeetype_id, conferencetalk_id)
);
CREATE TABLE
COMMENT ON TABLE userconferencerole IS
	'Tipo de participación de un usuario en un congreso - Si sólamente 
	fue como asistente, no requiere ningún registro en esta tabla.';
COMMENT
COMMENT ON COLUMN userconferencerole.conferencetalk_id IS
	'Si el usuario fue ponente, indicará aquí el ID de su ponencia. Si es
	organizador, este campo debe quedar nulo.';
COMMENT
CREATE TABLE roleinbooks (
	id serial,
	name text NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE roleinbooks IS
	'El rol que un usuario tiene en un libro';
COMMENT
CREATE TABLE bookstype (
	id SERIAL,
	name text NOT NULL,
	PRIMARY KEY(id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE bookstype IS
	'Tipo de libro - Único, serie, colección, etc.';
COMMENT
CREATE TABLE books ( 
    id SERIAL,
    title   text NOT NULL,
    author text NOT NULL,
    coauthors text NULL,
    booklink text  NULL,
    country_id int4 NOT NULL 
                 REFERENCES countries(id)
                 ON UPDATE CASCADE
                 DEFERRABLE,
    bookstype_id int4 NOT NULL
            REFERENCES bookstype(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    origlanguages_id  int4 NULL  
        	REFERENCES languages(id)
            	ON UPDATE CASCADE
		DEFERRABLE,
    translanguages_id int4 NULL  
        	REFERENCES languages(id)
            	ON UPDATE CASCADE
		DEFERRABLE,
    numcites int4 NULL CHECK (numcites >= 0),
    moduser_id int4 NULL                    
            REFERENCES users(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
    PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE books IS
	'Los libros que maneje el sistema';
COMMENT
COMMENT ON COLUMN books.author IS 'Nombre del autor principal del libro 
	(no es referencia, muchas veces no será usuario del sistema. Ver 
	tabla userbooks)';
COMMENT
COMMENT ON COLUMN books.coauthors IS 'Nombre de los coautores del libro 
	(no es referencia, muchas veces no será usuario del sistema. Ver 
	tabla userbooks)';
COMMENT
CREATE TABLE volumes (
	id serial,
	name text NOT NULL,
	PRIMARY KEY(id),
	UNIQUE(name)
);
CREATE TABLE
COMMENT ON TABLE volumes IS
	'Volúmenes (normalmente numerados) de libros';
COMMENT
CREATE TABLE booksvolumes (
        volumes_id int4 NOT NULL
	        REFERENCES volumes(id)
        	ON UPDATE CASCADE 
	        DEFERRABLE,
        books_id int4 NOT NULL 
	        REFERENCES books(id) 
        	ON UPDATE CASCADE
	        DEFERRABLE,
	title text NOT NULL,
	PRIMARY KEY (volumes_id,books_id)
);
CREATE TABLE
COMMENT ON TABLE booksvolumes IS
	'Representa a los libros que se agrupan como volúmenes de una obra';
COMMENT
CREATE TABLE editions (
	id SERIAL,
	name text NOT NULL,
	PRIMARY KEY(id),
	UNIQUE(name)
);
CREATE TABLE
COMMENT ON TABLE editions IS
	'Ediciones (normalmente numeradas) de libros';
COMMENT
CREATE TABLE bookseditionsstatus (
	id SERIAL,
	name text NOT NULL,
	PRIMARY KEY(id),
	UNIQUE(name)
);
CREATE TABLE
COMMENT ON TABLE bookseditionsstatus IS
	'Estado de una edición de un libro';
COMMENT
CREATE TABLE bookseditions ( 
    id serial,
    books_id int4 NOT NULL 
            REFERENCES books(id)
            ON UPDATE CASCADE   
            DEFERRABLE,
    editions_id int4 NOT NULL 
            REFERENCES editions(id)
            ON UPDATE CASCADE 
            DEFERRABLE,
    pages int4 NULL,     
    isbn  text NULL,     
    publisher_id int4 NULL 
	    REFERENCES publishers(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    mediatype_id int4 NOT NULL 
	    REFERENCES mediatype(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    bookseditionsstatus_id int4 NULL 
	    REFERENCES bookseditionsstatus(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    month int4 NULL CHECK (month >= 1 AND month <= 12),
    year  int4 NULL,       
    other text NULL,        
    moduser_id int4 NULL           
            REFERENCES users(id)   
            ON UPDATE CASCADE      
            DEFERRABLE,
    PRIMARY KEY (id),
    UNIQUE (books_id, editions_id, bookseditionsstatus_id)
);
CREATE TABLE
COMMENT ON TABLE bookseditions IS
	'Historial de las ediciones de un libro - En qué edición va? Cuándo 
	fue impresa? Cuál es el estado de cada una de ellas?';
COMMENT
CREATE TABLE bookseditionscopublisher (
    id serial,
    bookseditions_id int4 NOT NULL
	    REFERENCES bookseditions(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    publisher_id int4 NULL 
	    REFERENCES publishers(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    PRIMARY KEY(id),
    UNIQUE (bookseditions_id, publisher_id)
);
CREATE TABLE
COMMENT ON TABLE bookseditionscopublisher IS
	'Para las ediciones que tengan más de una editorial (la principal 
	está ya en bookseditions.publisher_id';
COMMENT
CREATE TABLE userbooks ( 
    id SERIAL,
    uid int4 NOT NULL 
            REFERENCES users(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
    books_id int4 NOT NULL 
            REFERENCES books(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    roleinbooks_id int4 NOT NULL 
            REFERENCES roleinbooks(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    year int4 NOT NULL,
    other text NULL,
    PRIMARY KEY (uid, books_id)
);
CREATE TABLE
COMMENT ON TABLE userbooks IS 
	'El rol de cada uno de los usuarios que participaron en un libro';
COMMENT
CREATE table chaptersbooks (
   id SERIAL,
   books_id int4 NOT NULL 
            REFERENCES books(id)
            ON UPDATE CASCADE
            DEFERRABLE,
   chapter text NOT NULL,
   pages   text NULL,
   year    int4 NOT NULL,
   numcites int4 NULL CHECK (numcites >= 0),
   moduser_id int4 NULL      
            REFERENCES users(id) 
            ON UPDATE CASCADE    
            DEFERRABLE,
   PRIMARY KEY (id),
  UNIQUE (books_id, chapter)
);
CREATE TABLE
CREATE INDEX chaptersbooks_chapter_idx ON chaptersbooks(chapter);
CREATE INDEX
CREATE INDEX chaptersbooks_chapter_year_idx ON chaptersbooks(chapter,year);
CREATE INDEX
COMMENT ON TABLE chaptersbooks IS
	'Capítulos en un libro (cuando son reportados por separado)';
COMMENT
COMMENT ON COLUMN chaptersbooks.chapter IS
	'Nombre del capítulo';
COMMENT
CREATE TABLE userchaptersbooks ( 
    id SERIAL,
    uid int4 NOT NULL 
            REFERENCES users(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
    chaptersbooks_id int4 NOT NULL
            REFERENCES chaptersbooks(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    roleinbooks_id int4 NOT NULL 
            REFERENCES roleinbooks(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    year int4 NOT NULL,
    other text NULL,
    PRIMARY KEY (uid, chaptersbooks_id)
);
CREATE TABLE
COMMENT ON TABLE userchaptersbooks IS 
	'El rol de cada uno de los usuarios que participaron en un capítulo
	de libro';
COMMENT
CREATE TABLE acadvisittype (
	id SERIAL,
	name text NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE acadvisittype IS
	'Tipos de visita académica';
COMMENT
CREATE TABLE acadvisits (
	id  SERIAL NOT NULL,
	uid int4 NOT NULL
            REFERENCES users(id)
            ON UPDATE CASCADE
            ON DELETE CASCADE
            DEFERRABLE,
    	institution_id integer NOT NULL 
	    REFERENCES institutions(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	country_id smallint NOT NULL
            REFERENCES countries(id)
            ON UPDATE CASCADE
            DEFERRABLE,
	acadvisittype_id integer NOT NULL 
	    REFERENCES acadvisittype(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
        name text NOT NULL,
	startyear int4 NOT NULL,
	startmonth int4 NULL CHECK (startmonth >= 1 AND startmonth <= 12),
	endyear int4  NULL,
	endmonth int4 NULL CHECK (endmonth >= 1 AND endmonth <= 12),
	place text NULL,
	goals text NULL,
    	other text  NULL,
	visitor_id integer NULL 
            REFERENCES externalusers(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
	PRIMARY KEY(id),
	CONSTRAINT valid_duration CHECK (endyear IS NULL OR
	       (startyear * 12 + coalesce(startmonth,0)) > (endyear * 12 + coalesce(endmonth,0)))
);
CREATE TABLE
COMMENT ON TABLE acadvisits IS
	'Cada una de las visitas académicas, relacionadas con el usuario en 
	cuestión';
COMMENT
COMMENT ON COLUMN acadvisits.visitor_id IS
	'Si esta columna apunta a un usuario externo, significa que el usuario participo
	 en la coordinación de una visita o estancia académica de un invitado';
COMMENT
CREATE TABLE sponsorsacadvisits (
	id  SERIAL NOT NULL,
	acadvisit_id integer NOT NULL 
	    REFERENCES  acadvisits(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
 	sponsorinst_id integer NOT NULL 
	    REFERENCES institutions(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	amount integer NOT NULL,
	PRIMARY KEY(id)
);
CREATE TABLE
COMMENT ON TABLE sponsorsacadvisits IS
	'Institución patrocinadora de cada visita académica';
COMMENT
CREATE TABLE thesisstatus (
    id SERIAL,
    name text NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE thesisstatus IS 
	'Estado de avance de la tesis';
COMMENT
CREATE TABLE thesismodality (
    id SERIAL,
    name text NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE thesismodality IS 
	'Modalidad del trabajo generado';
COMMENT
CREATE TABLE roleinthesis (
    id SERIAL,
    name text NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE roleinthesis IS 
	'Roles en una tesis';
COMMENT
CREATE TABLE thesis (
	id SERIAL NOT NULL,
    	title text NOT NULL,
	institution_id integer NOT NULL 
	    REFERENCES institutions(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    	academicdegree_id integer NOT NULL
            REFERENCES academicdegrees(id) 
            ON UPDATE CASCADE              
            DEFERRABLE,
    	thesisstatus_id integer NOT NULL
	    REFERENCES thesisstatus(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    	thesismodality_id integer NOT NULL 
	    REFERENCES thesismodality(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	academiccareer_id int4 NOT NULL 
            	REFERENCES academiccareers(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
	year int4 NOT NULL,
	month int4 NULL CHECK (month >= 1 AND month <= 12),
	moduser_id integer NULL      
            REFERENCES users(id) 
            ON UPDATE CASCADE    
            DEFERRABLE,
	PRIMARY KEY (id),
    	UNIQUE (title, academicdegree_id, year)
);
CREATE TABLE
COMMENT ON TABLE thesis IS 
	'Datos generales de cada una de las tesis';
COMMENT
COMMENT ON COLUMN thesis.academicdegree_id IS
	'Grado académico que esta tesis persigue';
COMMENT
CREATE TABLE userthesis (
   id SERIAL,
   thesis_id integer NOT NULL 
            REFERENCES thesis(id)
            ON UPDATE CASCADE
            DEFERRABLE,
   roleinthesis_id integer NOT NULL
            REFERENCES roleinthesis(id)
            ON UPDATE CASCADE
            DEFERRABLE,
   user_is_internal bool,
   externaluser_id integer NULL 
            REFERENCES externalusers(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
   internaluser_id integer NULL
            REFERENCES users(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
   PRIMARY KEY (id),
   CHECK (user_is_internal = 't' OR
	(internaluser_id IS NOT NULL AND externaluser_id IS NULL)),
   CHECK (user_is_internal = 'f' OR
	(externaluser_id IS NOT NULL AND internaluser_id IS NULL)),
   UNIQUE (thesis_id, externaluser_id, internaluser_id)
);
CREATE TABLE
COMMENT ON TABLE userthesis IS 
	'La relación entre un usuario (en rol de director/asesor/etc.) y una
	tesis';
COMMENT
COMMENT ON COLUMN userthesis.user_is_internal IS
	'El usuario es interno del sistema? Si sí, exigimos internaluser_id; 
	si no, exigimos externaluser_id';
COMMENT
CREATE TABLE thesislog (
    id SERIAL,
    thesis_id integer NOT NULL
            REFERENCES thesis(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    old_thesisstatus_id integer  NOT NULL 
	    REFERENCES thesisstatus(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    year int4 NOT NULL,
    month int4 NULL CHECK (month >= 1 AND month <= 12),
    moduser_id integer NULL      
            REFERENCES users(id) 
            ON UPDATE CASCADE    
            DEFERRABLE,
    dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE thesislog IS 
	'Bitácora de cambios de estado en la tesis';
COMMENT
CREATE TABLE studentsthesis ( 
   id SERIAL,
   thesis_id integer NOT NULL 
            REFERENCES thesis(id)
            ON UPDATE CASCADE
            ON DELETE CASCADE
            DEFERRABLE,
   user_is_internal bool, 
   externaluser_id integer 
            REFERENCES externalusers(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
   internaluser_id integer
            REFERENCES users(id)
            ON UPDATE CASCADE               
            DEFERRABLE,
   PRIMARY KEY (id),
   UNIQUE (thesis_id, internaluser_id ),
   UNIQUE (thesis_id, externaluser_id ),
   CHECK (user_is_internal = 't' or internaluser_id IS NOT NULL),
   CHECK (user_is_internal = 'f' or externaluser_id IS NOT NULL)
);
CREATE TABLE
COMMENT ON TABLE studentsthesis IS 
	'Relación entre un usuario (en rol de alumno) y una tesis';
COMMENT
COMMENT ON COLUMN studentsthesis.user_is_internal IS
	'El usuario es interno del sistema? Si sí, exigimos internaluser_id; 
	si no, exigimos externaluser_id';
COMMENT
CREATE TABLE prizetypes( 
	id SERIAL NOT NULL,
   	name text NOT NULL,     
   	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE prizetypes IS
	'Tipos de premio';
COMMENT
CREATE TABLE prizes ( 
    id SERIAL,
    title text NOT NULL,
    prizetypes_id int4 NOT NULL 
            REFERENCES prizetypes(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    institution_id int4 NOT NULL
            REFERENCES institutions(id) 
            ON UPDATE CASCADE           
            DEFERRABLE,
    moduser_id int4 NULL              
            REFERENCES users(id)   
            ON UPDATE CASCADE      
            DEFERRABLE,
    PRIMARY KEY (id),
    UNIQUE (title, institution_id)
);
CREATE TABLE
COMMENT ON TABLE prizes IS
	'Cada uno de los premios';
COMMENT
COMMENT ON COLUMN prizes.institution_id IS
	'Institución que otorga el premio';
COMMENT
CREATE TABLE userprizes (
    id serial,
    year   int4 NOT NULL,
    prize_id int4 NOT NULL 
            REFERENCES prizes(id)      
            ON UPDATE CASCADE
            DEFERRABLE,
    uid int4 NOT NULL 
            REFERENCES users(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
    PRIMARY KEY (id),
    UNIQUE (prize_id, uid, year)
);
CREATE TABLE
COMMENT ON TABLE userprizes IS
	'Qué usuarios han recibido qué premios';
COMMENT
CREATE TABLE grants ( 
    id SERIAL,
    title text NOT NULL,
    institution_id int4 NOT NULL
            REFERENCES institutions(id) 
            ON UPDATE CASCADE           
            DEFERRABLE,
    moduser_id int4 NULL       
            REFERENCES users(id)   
            ON UPDATE CASCADE      
            DEFERRABLE,
    PRIMARY KEY (id),
    UNIQUE (title, institution_id)
);
CREATE TABLE
COMMENT ON TABLE grants IS
	'Listado de becas, institución que las otorga';
COMMENT
CREATE TABLE usergrants (
    id serial,
    grants_id int4 NOT NULL 
            REFERENCES grants(id)      
            ON UPDATE CASCADE
            DEFERRABLE,
    uid int4 NOT NULL 
            REFERENCES users(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
    description text NULL, 
    startyear int4 NOT NULL,
    startmonth int4 NULL CHECK (startmonth >= 1 AND startmonth <= 12),
    endyear int4  NULL,
    endmonth int4 NULL CHECK (endmonth >= 1 AND endmonth <= 12),
    PRIMARY KEY (id),
    UNIQUE (grants_id, uid, startyear, startmonth),
    CONSTRAINT valid_duration CHECK (endyear IS NULL OR
	       (startyear * 12 + coalesce(startmonth,0)) > (endyear * 12 + coalesce(endmonth,0)))
);
CREATE TABLE
COMMENT ON TABLE usergrants IS
	'Quién ha recibido qué becas';
COMMENT
COMMENT ON COLUMN usergrants.description IS
	'¿Existe un objetivo de esta beca? ¿Cuál es?';
COMMENT
CREATE TABLE newspapers ( 
	id SERIAL,
	name text NOT NULL,
	url text NULL,
        moduser_id int4 NULL    	     
            REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE(name)
);
CREATE TABLE
COMMENT ON TABLE newspapers IS
	'Periódicos';
COMMENT
CREATE TABLE newspaperarticles (
	id serial,
	title text NOT NULL,
	authors text NOT NULL,
        newspaper_id int4 NOT NULL 
            REFERENCES newspapers(id)
            ON UPDATE CASCADE        
            DEFERRABLE,	
 	newsdate date NOT NULL,
	url text NULL,
	PRIMARY KEY (id),
	UNIQUE (title, newspaper_id, newsdate)
);
CREATE TABLE
COMMENT ON TABLE newspaperarticles IS
	'Artículos publicados en periódico';
COMMENT
CREATE TABLE usernewspaperarticles ( 
    id SERIAL,
    uid int4 NOT NULL 
            REFERENCES users(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
    newspaperarticle_id int4 NOT NULL 
            REFERENCES newspaperarticles(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    ismainauthor BOOLEAN NOT NULL default 't',
    other text NULL,
    dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (uid, newspaperarticle_id)
);
CREATE TABLE
COMMENT ON TABLE usernewspaperarticles IS
	'Autores de un artículo periodístico';
COMMENT
COMMENT ON COLUMN usernewspaperarticles.ismainauthor IS
	'Registramos únicamente si es el autor primario o no';
COMMENT
CREATE TABLE newspaperarticleslog (
    id SERIAL, 
    newspaperarticle_id integer NOT NULL 
            REFERENCES  newspaperarticles(id)
            ON UPDATE CASCADE
            ON DELETE CASCADE
            DEFERRABLE,
    artstatus_id integer NOT NULL 
            REFERENCES articlestatus(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    changedate date NOT NULL default now()::date,
    moduser_id integer NULL      
            REFERENCES users(id) 
            ON UPDATE CASCADE    
            DEFERRABLE,
    dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE newspaperarticleslog IS
	'Cambios en el estado de los artículos periodísticos';
COMMENT
CREATE TABLE pubtorefereed (
	id SERIAL,
	name text NOT NULL,
	PRIMARY KEY (id),
	UNIQUE(name)	
);
CREATE TABLE
CREATE TABLE refereedpubs(
	id serial,
	title text NOT NULL,
        pubtorefereed_id integer NOT NULL 
        	REFERENCES  pubtorefereed(id)
            	ON UPDATE CASCADE
	         DEFERRABLE,
	institution_id int4 NOT NULL 
            	REFERENCES institutions(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
	moduser_id integer NULL   
            REFERENCES users(id)      
            ON UPDATE CASCADE         
            DEFERRABLE,
	PRIMARY KEY (id)	
);
CREATE TABLE
CREATE TABLE userrefereedpubs (
	id SERIAL,
	refereedpubs_id integer NOT NULL 
        	REFERENCES refereedpubs(id)
            	ON UPDATE CASCADE
	        DEFERRABLE,
	user_is_internal bool, 
   	externaluser_id integer NULL 
        	REFERENCES externalusers(id)            
            	ON UPDATE CASCADE               
            	DEFERRABLE,
	internaluser_id integer NULL
            REFERENCES users(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
   	PRIMARY KEY (id),
	CHECK (user_is_internal = 't' OR
		(internaluser_id IS NOT NULL AND externaluser_id IS NULL)),
	CHECK (user_is_internal = 'f' OR
		(externaluser_id IS NOT NULL AND internaluser_id IS NULL)),
	UNIQUE (refereedpubs_id, externaluser_id, internaluser_id)
);
CREATE TABLE
CREATE TABLE genericworkgroups (
	id serial,
	name text NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE genericworkgroups IS
	'Listado del grupo al que pertenecen las trabajos genericos';
COMMENT
CREATE TABLE genericworktypes (
	id serial,
	name text NOT NULL,
	abbrev text NULL,
	genericworkgroup_id int4 NOT NULL 
	    REFERENCES genericworkgroups(id)
            ON UPDATE CASCADE               
            DEFERRABLE,
	moduser_id int4 NULL    	     
	    REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (name),
	UNIQUE (abbrev)
);
CREATE TABLE
COMMENT ON TABLE genericworktypes IS 
	'Tipos de trabajos genéricos que manejamos';
COMMENT
CREATE TABLE genericworkstatus (
	id serial,
	name text NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE genericworkstatus IS 
	'Estado de un trabajo genérico';
COMMENT
CREATE TABLE genericworks( 
    id SERIAL,
    authors text NOT NULL,
    title   text NOT NULL,
    genericworktypes_id int4 NOT NULL     
            REFERENCES genericworktypes(id)
            ON UPDATE CASCADE 
            DEFERRABLE,
    genericworkstatus_id int4 NOT NULL     
            REFERENCES genericworkstatus(id)
            ON UPDATE CASCADE 
            DEFERRABLE,
    institution_id integer NULL 
	    REFERENCES institutions(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    publisher_id int4 NULL 
            	REFERENCES publishers(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
    reference text NULL,
    vol text NULL,
    pages text NULL,
    year int4 NOT NULL,
    month int4 NULL CHECK (month >= 1 AND month <= 12),
    isbn_issn text NULL,
    numcites int4 NULL CHECK (numcites >= 0),
    other text NULL,
    moduser_id int4 NULL    	     
	    REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
    PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE genericworks IS 
	'Trabajos genéricos (publicaciones no contempladas en otros 
	apartados del sistema)';
COMMENT
COMMENT ON COLUMN genericworks.isbn_issn IS
	'Dependiendo del tipo de trabajo, puede recibir número ISBN o ISSN';
COMMENT
CREATE TABLE usergenericworks (
   id SERIAL,
   genericwork_id int4 NOT NULL 
            REFERENCES genericworks(id)
            ON UPDATE CASCADE
            DEFERRABLE,
   user_is_internal bool,
   externaluser_id integer 
            REFERENCES externalusers(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
   internaluser_id integer 
             REFERENCES users(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
   userrole_id integer NOT NULL 
            REFERENCES userrole(id)
            ON UPDATE CASCADE
            DEFERRABLE,
   PRIMARY KEY (id),
   UNIQUE (genericwork_id, internaluser_id ),
   UNIQUE (genericwork_id, externaluser_id ),
   CHECK (user_is_internal = 't' OR
	(internaluser_id IS NOT NULL AND externaluser_id IS NULL)),
   CHECK (user_is_internal = 'f' OR
	(externaluser_id IS NOT NULL AND internaluser_id IS NULL))
);
CREATE TABLE
COMMENT ON TABLE usergenericworks IS 
	'Rol de cada uno de los usuarios involucrados en un trabajo genérico';
COMMENT
COMMENT ON COLUMN usergenericworks.user_is_internal IS
	'Este usuario es interno o externo? Eige (NOT NULL) el tipo de usuario 
	adecuado: externaluser_id o internaluser_id';
COMMENT
CREATE TABLE usergenericworkslog (
    id SERIAL, 
    usergenericworks_id integer NOT NULL 
            REFERENCES articles(id)
            ON UPDATE CASCADE
            ON DELETE CASCADE
            DEFERRABLE,
    genericworkstatus_id integer NOT NULL 
            REFERENCES genericworkstatus(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    changedate date NOT NULL default now()::date,
    moduser_id integer NULL      
            REFERENCES users(id) 
            ON UPDATE CASCADE    
            DEFERRABLE,
    dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE usergenericworkslog IS
	'Estado actual (y bitácora) de un trabajo genérico - Cuándo fue
	 enviado, cuándo fue aceptado, etc.';
COMMENT
CREATE TABLE techproducttypes (
	id serial,
	name text NOT NULL,
	moduser_id int4 NULL    	     
	    REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
	PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE techproducttypes IS
	'Tipos de producto técnico';
COMMENT
CREATE TABLE techproductstatus (
	id SERIAL,	    
	name text NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE techproductstatus IS 
	'Estado en que puede estar un producto técnico';
COMMENT
CREATE TABLE techproducts (
	id serial,
	techproducttype_id int4  NULL 
            	REFERENCES techproducttypes(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
	title text NOT NULL,
	authors text NOT NULL,
	descr text NULL,
	institution_id int4  NULL
            	REFERENCES institutions(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
	moduser_id integer NULL  
        	REFERENCES users(id) 
            	ON UPDATE CASCADE    
            	DEFERRABLE,
	PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE techproducts IS
	'Cada uno de los productos técnicos generados';
COMMENT
COMMENT ON COLUMN techproducts.institution_id IS
	'Institución en la que este producto fue creado (independiente de las
	instituciones de adscripción de cada uno de sus participantes)';
COMMENT
CREATE TABLE techproductversions (
	id SERIAL,
	techproduct_id int4  NULL 
            	REFERENCES techproducts(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
        techproductstatus_id integer NOT NULL
	    REFERENCES techproductstatus(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	release text NOT NULL,
	descr text NULL,
	year int4 NOT NULL,
	month int4 NULL CHECK (month>=1 AND month <=12),
	isbn text NULL,
	other text NULL,
	PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE techproductversions IS 
	'Cada una de las versiones de un proucto técnico';
COMMENT
COMMENT ON COLUMN techproductversions.release IS 
	'Número de versión o descripción de edición';
COMMENT
COMMENT ON COLUMN techproductversions.isbn IS 
	'Número de registro (ISBN u otro) del producto';
COMMENT
CREATE TABLE techproductfinancingsource (
    id SERIAL,
    techproduct_id integer NOT NULL 
	    REFERENCES techproducts(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    financingsource_id integer NOT NULL 
	    REFERENCES institutions(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    amount integer NOT NULL,
    other text NULL,
    PRIMARY KEY (id),
    UNIQUE (techproduct_id, financingsource_id )
);
CREATE TABLE
COMMENT ON TABLE techproductfinancingsource IS
	'Fuentes de financiamiento de cada producto técnico';
COMMENT
CREATE TABLE usertechproducts (
	id SERIAL,
	techproduct_id integer NOT NULL 
        	REFERENCES techproducts(id)
            	ON UPDATE CASCADE
            	DEFERRABLE,
	user_is_internal bool,
	externaluser_id integer 
        	REFERENCES externalusers(id)            
            	ON UPDATE CASCADE               
		DEFERRABLE,
	internaluser_id integer 
         	REFERENCES users(id)            
	        ON UPDATE CASCADE               
	        DEFERRABLE,
	userrole_id integer NULL 
        	REFERENCES userrole(id)
	        ON UPDATE CASCADE
        	DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (techproduct_id, internaluser_id ),
	UNIQUE (techproduct_id, externaluser_id ),
	CHECK (user_is_internal = 't' OR
		(internaluser_id IS NOT NULL AND externaluser_id IS NULL)),
	CHECK (user_is_internal = 'f' OR
		(externaluser_id IS NOT NULL AND internaluser_id IS NULL))
);
CREATE TABLE
COMMENT ON TABLE usertechproducts IS
	'Productos técnicos en los que cada usuario ha estado involucrado';
COMMENT
COMMENT ON COLUMN usertechproducts.user_is_internal IS
	'El usuario es interno del sistema? Si sí, exigimos internaluser_id; 
	si no, exigimos externaluser_id';
COMMENT
CREATE TABLE activitygroups (
	id serial,
	name text NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE activitygroups IS
	'Listado del grupo al que pertenecen las otras actividades';
COMMENT
CREATE TABLE activitytypes (
	id serial,
	name text NOT NULL,
	abbrev text NULL,
	activitygroup_id int4 NOT NULL   
	    REFERENCES activitygroups(id) 
            ON UPDATE CASCADE 
            DEFERRABLE,
	moduser_id int4 NULL    	     
	    REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (name),
	UNIQUE (abbrev)
);
CREATE TABLE
COMMENT ON TABLE activitytypes IS
	'Listado de otros tipos de actividades';
COMMENT
CREATE TABLE activities( 
    id SERIAL,
    uid int4 NOT NULL            
            REFERENCES users(id) 
            ON UPDATE CASCADE    
            DEFERRABLE,
    activitytype_id int4 NOT NULL     
            REFERENCES activitytypes(id)
            ON UPDATE CASCADE 
            DEFERRABLE,
    title   text NOT NULL,
    other text  NULL,
    startyear int4 NOT NULL,
    startmonth int4 NULL CHECK (startmonth >= 1 AND startmonth <= 12),
    endyear int4  NULL,
    endmonth int4 NULL CHECK (endmonth >= 1 AND endmonth <= 12),
    PRIMARY KEY (id),
    CONSTRAINT valid_duration CHECK (endyear IS NULL OR
	       (startyear * 12 + coalesce(startmonth,0)) > (endyear * 12 + coalesce(endmonth,0)))
);
CREATE TABLE
COMMENT ON TABLE activities IS
	'Otras actividades académicas en las que participan los usuarios';
COMMENT
CREATE TABLE activitiesinstitutions (
   activities_id int4 NOT NULL 
            REFERENCES activities(id)
            ON UPDATE CASCADE
            DEFERRABLE,
   institution_id integer NOT NULL 
	    REFERENCES institutions(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
   PRIMARY KEY (activities_id, institution_id)
);
CREATE TABLE
COMMENT ON TABLE activitiesinstitutions IS
	'Instituciones que participen en otras actividades académicas';
COMMENT
CREATE TABLE useractivities (
   id SERIAL,
   activities_id int4 NOT NULL 
            REFERENCES activities(id)
            ON UPDATE CASCADE
            DEFERRABLE,
   uid int4 NOT NULL 
            REFERENCES users(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
   userrole_id int4 NOT NULL 
            REFERENCES userrole(id)
            ON UPDATE CASCADE
            DEFERRABLE,   
   PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE useractivities IS
	'Relación entre usuarios y las actividades académicas';
COMMENT
CREATE TABLE projectstype (
	id SERIAL,
	name text NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE projectstype IS
	'Tipos de proyectos';
COMMENT
CREATE TABLE projectstatus (
	id SERIAL,
	name text NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE projectstatus IS
	'Estado de los proyectos';
COMMENT
CREATE TABLE projects ( 
    id SERIAL,   
    title   text NOT NULL,
    description text NOT NULL,
    projectstype_id integer NOT NULL
	    REFERENCES projectstype(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    projectstatus_id integer NOT NULL
	    REFERENCES projectstatus(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    parentproject_id integer NULL
	    REFERENCES projects(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    subject  text NULL,
    summary  text NULL, 
    abbrev   text NULL,
    goals   text NULL, 
    notes   text NULL,
    startyear int4 NOT NULL,
    startmonth int4 NULL CHECK (startmonth >= 1 AND startmonth <= 12),
    endyear int4  NULL,
    endmonth int4 NULL CHECK (endmonth >= 1 AND endmonth <= 12),
    url	     text NULL,
    other    text NULL,
    moduser_id int4 NULL  
               REFERENCES users(id)             
               ON UPDATE CASCADE                
               DEFERRABLE,
    PRIMARY KEY(id),
    UNIQUE (title),
    CONSTRAINT valid_duration CHECK (endyear IS NULL OR
	       (startyear * 12 + coalesce(startmonth,0)) > (endyear * 12 + coalesce(endmonth,0)))
);
CREATE TABLE
CREATE INDEX projects_title_idx ON projects(title);
CREATE INDEX
CREATE INDEX projects_description_idx ON projects(description);
CREATE INDEX
COMMENT ON TABLE projects IS
	'Datos generales de cada uno de los proyectos';
COMMENT
COMMENT ON COLUMN projects.parentproject_id IS
	'Para implementar sub-proyectos, relacionamos con un proyecto padre';
COMMENT
COMMENT ON COLUMN projects.subject IS
	'Temática, tema (no confundir con title)';
COMMENT
COMMENT ON COLUMN projects.abbrev IS
	'Acrónimo';
COMMENT
COMMENT ON COLUMN projects.notes IS
	'Logros y avances';
COMMENT
CREATE TABLE projectinstitutions (
    id SERIAL,
    project_id integer NOT NULL 
	    REFERENCES projects(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    institution_id integer NOT NULL 
	    REFERENCES institutions(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    other text NULL,
    PRIMARY KEY (id),
    UNIQUE (project_id, institution_id)
);
CREATE TABLE
COMMENT ON TABLE projectinstitutions IS
	'Relación de cada proyecto con las instituciones relacionadas';
COMMENT
CREATE TABLE projectresearchlines (
    id SERIAL,
    project_id integer NOT NULL 
	    REFERENCES projects(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    researchlines_id integer NOT NULL 
	    REFERENCES researchlines(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    other text NULL,
    PRIMARY KEY (id),
    UNIQUE (project_id, researchlines_id)
);
CREATE TABLE
COMMENT ON TABLE projectresearchlines IS
	'Relación de cada proyecto con las líneas de investigación';
COMMENT
CREATE TABLE projectresearchareas (
    id SERIAL,
    project_id integer NOT NULL 
	    REFERENCES projects(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    researchareas_id integer NOT NULL 
	    REFERENCES researchareas(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    other text NULL,
    PRIMARY KEY (id),
    UNIQUE (project_id, researchareas_id)
);
CREATE TABLE
COMMENT ON TABLE projectresearchareas IS
	'Relación de cada proyecto con las líneas de investigación';
COMMENT
CREATE TABLE filesprojects (
   id serial NOT NULL,
   project_id int4 NOT NULL
            REFERENCES projects(id)
            ON UPDATE CASCADE
            DEFERRABLE,
   filename text NOT NULL,
   filedescr text NULL,
   content bytea NOT NULL,
   creationtime timestamp NOT NULL DEFAULT now(),
   lastmodiftime timestamp NOT NULL DEFAULT now(),
   moduser_id int4 NULL      
            REFERENCES users(id) 
            ON UPDATE CASCADE    
            DEFERRABLE,
    dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    UNIQUE (project_id, filename)
);
CREATE TABLE
COMMENT ON TABLE filesprojects IS
	'Archivos relacionados a los proyectos';
COMMENT
COMMENT ON COLUMN filesprojects.project_id IS
	'ID del proyect referenciado';
COMMENT
COMMENT ON COLUMN filesprojects.content IS
	'Contenido (binario) del archivo';
COMMENT
CREATE TABLE projectfinancingsource (
    id SERIAL,
    project_id integer NOT NULL 
	    REFERENCES projects(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    financingsource_id integer NOT NULL 
	    REFERENCES institutions(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
    amount integer NOT NULL,
    other text NULL,
    PRIMARY KEY (id),
    UNIQUE (project_id, financingsource_id )
);
CREATE TABLE
COMMENT ON TABLE projectfinancingsource IS
	'Fuentes de financiamiento (instituciones) de cada proyecto';
COMMENT
CREATE TABLE roleinproject (
	id SERIAL,
	name text NOT NULL,
	PRIMARY KEY (id),
	UNIQUE(name)
);
CREATE TABLE
COMMENT ON TABLE roleinproject IS
	'Roles en un proyecto';
COMMENT
CREATE TABLE userprojects (
   id SERIAL,
   projects_id integer NOT NULL 
            REFERENCES projects(id)
            ON UPDATE CASCADE
            DEFERRABLE,
   user_is_internal bool, 
   externaluser_id integer 
            REFERENCES externalusers(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
   internaluser_id integer 
             REFERENCES users(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
   roleinproject_id integer NOT NULL 
            REFERENCES roleinproject(id)
            ON UPDATE CASCADE
            DEFERRABLE,
   PRIMARY KEY (id),
   UNIQUE (projects_id, internaluser_id ),
   UNIQUE (projects_id, externaluser_id ),
   CHECK (user_is_internal = 't' OR
	(internaluser_id IS NOT NULL AND externaluser_id IS NULL)),
   CHECK (user_is_internal = 'f' OR
	(externaluser_id IS NOT NULL AND internaluser_id IS NULL))
);
CREATE TABLE
COMMENT ON TABLE userprojects IS
	'Relación entre usuarios (internos/externos) y proyectos';
COMMENT
COMMENT ON COLUMN userprojects.user_is_internal IS
	'El usuario es interno del sistema? Si sí, exigimos internaluser_id; 
	si no, exigimos externaluser_id';
COMMENT
CREATE TABLE projectsarticles (
	project_id integer NOT NULL 
	    REFERENCES projects(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	article_id integer NOT NULL 
	    REFERENCES articles(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	PRIMARY KEY (project_id, article_id)
);
CREATE TABLE
COMMENT ON TABLE projectsarticles IS
	'Artículos relacionados con cada proyecto';
COMMENT
CREATE TABLE projectsthesis (
	project_id integer NOT NULL 
	    REFERENCES projects(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	thesis_id integer NOT NULL 
	    REFERENCES thesis(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	PRIMARY KEY (project_id, thesis_id)
);
CREATE TABLE
COMMENT ON TABLE projectsthesis IS
	'Artículos relacionados con cada proyecto';
COMMENT
CREATE TABLE projectsbooks (
	project_id integer NOT NULL 
	    REFERENCES projects(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	books_id integer NOT NULL 
	    REFERENCES books(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	PRIMARY KEY (project_id, books_id)
);
CREATE TABLE
COMMENT ON TABLE projectsbooks IS
	'Libros relacionados con cada proyecto';
COMMENT
CREATE TABLE projectschaptersbooks (
	project_id integer NOT NULL 
	    REFERENCES projects(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	chaptersbooks_id integer NOT NULL 
	    REFERENCES chaptersbooks(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	PRIMARY KEY (project_id, chaptersbooks_id)
);
CREATE TABLE
COMMENT ON TABLE projectschaptersbooks IS
	'Capítulos en libro relacionados con cada proyecto';
COMMENT
CREATE TABLE projectsconferencetalks (
	project_id integer NOT NULL 
	    REFERENCES projects(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	conferencetalks_id integer NOT NULL 
	    REFERENCES conferencetalks(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	PRIMARY KEY (project_id, conferencetalks_id)
);
CREATE TABLE
COMMENT ON TABLE projectsconferencetalks IS
	'Ponencias en congreso relacionadas con cada proyecto';
COMMENT
CREATE TABLE projectsacadvisits (
	project_id integer NOT NULL 
	    REFERENCES projects(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	acadvisits_id integer NOT NULL 
	    REFERENCES acadvisits(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	PRIMARY KEY (project_id, acadvisits_id)
);
CREATE TABLE
COMMENT ON TABLE projectsacadvisits IS
	'Estancias académicas relacionadas con cada proyecto';
COMMENT
CREATE TABLE projectsgenericworks (
	project_id integer NOT NULL 
	    REFERENCES projects(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	genericworks_id integer NOT NULL 
	    REFERENCES genericworks(id)
	    ON UPDATE CASCADE
	    DEFERRABLE,
	PRIMARY KEY (project_id, genericworks_id)
);
CREATE TABLE
COMMENT ON TABLE projectsgenericworks IS
	'Trabajos genéricos relacionados con cada proyecto';
COMMENT
CREATE TABLE skilltypes (
	id serial,
	name text NOT NULL,
	moduser_id integer NULL  
        	REFERENCES users(id) 
            	ON UPDATE CASCADE    
            	DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE skilltypes IS
	'Diferentes habilidades que un usuario (Tec. Acad.) puede reportar';
COMMENT
CREATE TABLE userskills (
	id serial,
	user_id integer NOT NULL  
        	REFERENCES users(id) 
            	ON UPDATE CASCADE    
          	ON DELETE CASCADE     
            	DEFERRABLE,
	skilltype_id integer NOT NULL  
        	REFERENCES skilltypes(id) 
            	ON UPDATE CASCADE    
            	DEFERRABLE,
	descr text NULL,
	PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE userskills IS
	'Las habilidades que cada usuario tiene, junto con una descripción
	opcional';
COMMENT
CREATE TABLE organtype (
	id serial,
	name text NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE organtype IS
	'Tipos de órgano - Colegiado, editorial, otro';
COMMENT
CREATE TABLE roleinorgan (
	id serial,
	name text NOT NULL,
	moduser_id int4 NULL    	     
	    REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE roleinorgan IS
	'Roles definidos en un órgano';
COMMENT
CREATE TABLE organ (
	id serial,
	name text NOT NULL,
	abbrev text NULL,
	organtype_id int4 NOT NULL
	    REFERENCES organtype(id)
            ON UPDATE CASCADE  
            DEFERRABLE,
	institution_id int4 NOT NULL
	    REFERENCES institutions(id)
            ON UPDATE CASCADE  
            DEFERRABLE,
	moduser_id int4 NULL    	     
	    REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (name),
	UNIQUE (abbrev)
);
CREATE TABLE
COMMENT ON TABLE organ IS
	'Catálogo de órganos colegiados/editoriales';
COMMENT
CREATE TABLE userorgan (
	id SERIAL,
	uid int4 NOT NULL
	    REFERENCES users(id)
            ON UPDATE CASCADE  
            ON DELETE CASCADE  
            DEFERRABLE,
	organ_id int4 NOT NULL
	    REFERENCES organ(id)
            ON UPDATE CASCADE   
            DEFERRABLE,
	roleinorgan_id int4 NOT NULL
	    REFERENCES roleinorgan(id)
            ON UPDATE CASCADE   
            DEFERRABLE,
	startyear int4 NOT NULL,
	startmonth int4 NULL CHECK (startmonth >= 1 AND startmonth <= 12),
	endyear int4  NULL,
	endmonth int4 NULL CHECK (endmonth >= 1 AND endmonth <= 12),
	PRIMARY KEY(id),
	CONSTRAINT valid_duration CHECK (endyear IS NULL OR
		(startyear * 12 + coalesce(startmonth,0)) > (endyear * 12 + coalesce(endmonth,0)))	
);
CREATE TABLE
COMMENT ON TABLE userorgan IS
	'Roles que un usuario ha tenido en un órgano, con periodo';
COMMENT
CREATE TABLE articlesfiles (
	id serial NOT NULL,
	filename text NOT NULL,
	articles_id int4 NOT NULL
		REFERENCES articles(id)
		ON UPDATE CASCADE
		ON DELETE CASCADE
		DEFERRABLE,
	filedescr text NULL,
	content bytea NOT NULL,
	creationtime timestamp NOT NULL DEFAULT now(),
	lastmodiftime timestamp NOT NULL DEFAULT now(),
	moduser_id int4 NULL         
		REFERENCES users(id) 
		ON UPDATE CASCADE    
		DEFERRABLE,
	dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (id),
	UNIQUE (articles_id, filename)
);
CREATE TABLE
CREATE INDEX articlesfiles_filename_idx ON articlesfiles(filename);
CREATE INDEX
CREATE INDEX articlesfiles_articles_idx ON articlesfiles(articles_id);
CREATE INDEX
COMMENT ON TABLE articlesfiles IS
	'Archivos relacionados a un artículo';
COMMENT
COMMENT ON COLUMN articlesfiles.content IS
	'Contenido (binario) del archivo';
COMMENT
CREATE TABLE booksfiles (
	id serial NOT NULL,
	filename text NOT NULL,
	books_id int4 NOT NULL
		REFERENCES books(id)
		ON UPDATE CASCADE
		ON DELETE CASCADE
		DEFERRABLE,
	filedescr text NULL,
	content bytea NOT NULL,
	creationtime timestamp NOT NULL DEFAULT now(),
	lastmodiftime timestamp NOT NULL DEFAULT now(),
	moduser_id int4 NULL         
		REFERENCES users(id) 
		ON UPDATE CASCADE    
		DEFERRABLE,
	dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (id),
	UNIQUE (books_id, filename)
);
CREATE TABLE
CREATE INDEX booksfiles_filename_idx ON booksfiles(filename);
CREATE INDEX
CREATE INDEX booksfiles_books_idx ON booksfiles(books_id);
CREATE INDEX
COMMENT ON TABLE articlesfiles IS
	'Archivos relacionados a un libro';
COMMENT
COMMENT ON COLUMN articlesfiles.content IS
	'Contenido (binario) del archivo';
COMMENT
CREATE TABLE chaptersbooksfiles (
	id serial NOT NULL,
	filename text NOT NULL,
	chaptersbooks_id int4 NOT NULL
		REFERENCES chaptersbooks(id)
		ON UPDATE CASCADE
		ON DELETE CASCADE
		DEFERRABLE,
	filedescr text NULL,
	content bytea NOT NULL,
	creationtime timestamp NOT NULL DEFAULT now(),
	lastmodiftime timestamp NOT NULL DEFAULT now(),
	moduser_id int4 NULL         
		REFERENCES users(id) 
		ON UPDATE CASCADE    
		DEFERRABLE,
	dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (id),
	UNIQUE (chaptersbooks_id, filename)
);
CREATE TABLE
CREATE INDEX chaptersbooksfiles_filename_idx ON chaptersbooksfiles(filename);
CREATE INDEX
CREATE INDEX chaptersbooksfiles_chaptersbooks_idx ON
	chaptersbooksfiles(chaptersbooks_id);
CREATE INDEX
COMMENT ON TABLE chaptersbooksfiles IS
	'Archivos relacionados a un capítulo de libro';
COMMENT
COMMENT ON COLUMN chaptersbooksfiles.content IS
	'Contenido (binario) del archivo';
COMMENT
CREATE TABLE conferencetalksfiles (
	id serial NOT NULL,
	filename text NOT NULL,
	conferencetalks_id int4 NOT NULL
		REFERENCES conferencetalks(id)
		ON UPDATE CASCADE
		ON DELETE CASCADE
		DEFERRABLE,
	filedescr text NULL,
	content bytea NOT NULL,
	creationtime timestamp NOT NULL DEFAULT now(),
	lastmodiftime timestamp NOT NULL DEFAULT now(),
	moduser_id int4 NULL         
		REFERENCES users(id) 
		ON UPDATE CASCADE    
		DEFERRABLE,
	dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (id),
	UNIQUE (conferencetalks_id, filename)
);
CREATE TABLE
CREATE INDEX conferencetalksfiles_filename_idx ON 
	conferencetalksfiles(filename);
CREATE INDEX
CREATE INDEX conferencetalksfiles_conferencetalks_idx ON 
	conferencetalksfiles(conferencetalks_id);
CREATE INDEX
COMMENT ON TABLE conferencetalksfiles IS
	'Archivos relacionados a una conferencia';
COMMENT
COMMENT ON COLUMN conferencetalksfiles.content IS
	'Contenido (binario) del archivo';
COMMENT
CREATE TABLE genericworksfiles (
	id serial NOT NULL,
	filename text NOT NULL,
	genericworks_id int4 NOT NULL
		REFERENCES genericworks(id)
		ON UPDATE CASCADE
		ON DELETE CASCADE
		DEFERRABLE,
	filedescr text NULL,
	content bytea NOT NULL,
	creationtime timestamp NOT NULL DEFAULT now(),
	lastmodiftime timestamp NOT NULL DEFAULT now(),
	moduser_id int4 NULL         
		REFERENCES users(id) 
		ON UPDATE CASCADE    
		DEFERRABLE,
	dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (id),
	UNIQUE (genericworks_id, filename)
);
CREATE TABLE
CREATE INDEX genericworksfiles_filename_idx ON genericworksfiles(filename);
CREATE INDEX
CREATE INDEX genericworksfiles_genericworks_idx ON 
	genericworksfiles(genericworks_id);
CREATE INDEX
COMMENT ON TABLE genericworksfiles IS
	'Archivos relacionados a un trabajo genérico';
COMMENT
COMMENT ON COLUMN genericworksfiles.content IS
	'Contenido (binario) del archivo';
COMMENT
CREATE TABLE jobpositiontype (  
	id SERIAL,		
	name text NOT NULL,   	
	PRIMARY KEY (id), 	
	UNIQUE (name)           
);
CREATE TABLE
COMMENT ON TABLE jobpositiontype IS 
	'Tipos de personal';
COMMENT
CREATE TABLE jobpositionlevel (
	id SERIAL,		
	name text NOT NULL,     
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE jobpositionlevel IS 
	'Niveles (para académicos) o ramas (para administrativos) de 
	contratación';
COMMENT
CREATE TABLE jobpositioncategory (
	id SERIAL,
	name text NOT NULL,
	jobpositiontype_id smallint NOT NULL 
                         REFERENCES jobpositiontype(id)
                         ON UPDATE CASCADE
                         DEFERRABLE,
	jobpositionlevel_id smallint NOT NULL 
                         REFERENCES jobpositionlevel(id)
                         ON UPDATE CASCADE
                         DEFERRABLE,
	administrative_id text NULL, 
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE jobpositioncategory IS 
	'Los puestos existentes en la UNAM, dependientes de jobpositiontype y
	jobpositionlevel';
COMMENT
COMMENT ON COLUMN jobpositioncategory.administrative_id IS
	'ID administrativo de la adscripción en la universidad - Lo mantenemos
	únicamente como descripción en texto';
COMMENT
CREATE TABLE contracttype (
	id SERIAL,
	name text NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE contracttype IS 
	'Tipos de contratación ';
COMMENT
CREATE TABLE userjobposition (
	id SERIAL, 
	uid int4 NOT NULL 
            REFERENCES users(id)
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
	jobpositioncategory_id smallint NULL 
                         REFERENCES jobpositioncategory(id)
                         ON UPDATE CASCADE
                         DEFERRABLE,
	startmonth int4 NULL CHECK (startmonth<=12 AND startmonth>=1),
	startyear int4 NOT NULL,
	endmonth int4 NULL CHECK (endmonth<=12 AND endmonth>=1),
	endyear  int4 NULL,
	contracttype_id integer NULL
		REFERENCES contracttype(id)
		ON UPDATE CASCADE
		DEFERRABLE,
	description text NULL,
	institution_id int4 NOT NULL 
            	REFERENCES institutions(id) 
            	ON UPDATE CASCADE           
            	DEFERRABLE,
	PRIMARY KEY (id),
	CONSTRAINT valid_duration CHECK (endyear IS NULL OR
	       (startyear * 12 + coalesce(startmonth,0)) > (endyear * 12 + coalesce(endmonth,0)))
);
CREATE TABLE
COMMENT ON TABLE userjobposition IS 
	'Relación entre un usuario y todos los datos que describen a su puesto
	(incluye periodos, para construir la historia laboral)';
COMMENT
COMMENT ON COLUMN userjobposition.jobpositioncategory_id IS
	'Puesto en que laboró en la UNAM - En caso de ser personal por 
	honorarios, queda nulo (no hay catálogo de puestos por honorarios),
	manejando sólo la descripción, y asociando a la institución adecuada.';
COMMENT
CREATE TABLE stimulustype (
	id SERIAL,
	name text NOT NULL,
	descr text NULL,
	institution_id int4 NOT NULL
		REFERENCES institutions(id)
		ON UPDATE CASCADE
		DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE stimulustype IS 
	'Tipos de estímulos';
COMMENT
COMMENT ON COLUMN stimulustype.name IS 
	'Nombre corto/abreviación del estímulo';
COMMENT
COMMENT ON COLUMN stimulustype.descr IS 
	'Nombre completo del estímulo';
COMMENT
COMMENT ON COLUMN stimulustype.institution_id IS 
	'Institución que lo otorga';
COMMENT
CREATE TABLE stimuluslevel (
	id SERIAL,
	name text NOT NULL,
	stimulustype_id int4 NOT NULL
		REFERENCES stimulustype(id)
		ON UPDATE CASCADE
		DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (name, stimulustype_id)
);
CREATE TABLE
COMMENT ON TABLE stimuluslevel IS 
	'Niveles de estímulos para cada uno de los tipos';
COMMENT
CREATE TABLE userstimulus (
	id SERIAL, 
	uid int4 NOT NULL 
            REFERENCES users(id)
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
	stimuluslevel_id smallint NULL 
                         REFERENCES stimuluslevel(id)
                         ON UPDATE CASCADE
                         DEFERRABLE,
	startmonth int4 NULL CHECK (startmonth<=12 AND startmonth>=1),
	startyear int4 NOT NULL,
	endmonth int4 NULL CHECK (endmonth<=12 AND endmonth>=1),
	endyear  int4 NULL,
	PRIMARY KEY (id),
	CONSTRAINT valid_duration CHECK (endyear IS NULL OR
	       (startyear * 12 + coalesce(startmonth,0)) > (endyear * 12 + coalesce(endmonth,0)))
);
CREATE TABLE
COMMENT ON TABLE userstimulus IS 
	'Estímulos con que ha contado un usuario, incluyendo nivel, con fecha
	de inicio/término';
COMMENT
CREATE TABLE stimulusstatus (
	id SERIAL, 
	name varchar(50) NOT NULL,
	PRIMARY KEY (id),
	UNIQUE(name)
);
CREATE TABLE
COMMENT ON TABLE stimulusstatus IS 
	'Estados de cada cambio de nivel de estímulos';
COMMENT
CREATE TABLE stimuluslog (
    id SERIAL, 
    stimulus_id integer NOT NULL 
            REFERENCES userstimulus(id)
            ON UPDATE CASCADE
            ON DELETE CASCADE
            DEFERRABLE,
    stimulusstatus_id integer NOT NULL 
            REFERENCES stimulusstatus(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    changedate date NOT NULL default now()::date,
    moduser_id integer NULL      
            REFERENCES users(id) 
            ON UPDATE CASCADE    
            DEFERRABLE,
    dbtime timestamp DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE stimuluslog IS 
	'Fecha de cambio de estado de solicitudes de nivel estímulos';
COMMENT
CREATE TABLE adscription (
	id serial,
	name text NOT NULL,
	abbrev text NULL, 
	descr text NULL,
	institution_id int4 NOT NULL
		REFERENCES institutions(id)
		ON UPDATE CASCADE
		DEFERRABLE,
	administrative_id text NULL, 
	PRIMARY KEY(id),
	UNIQUE(name),
	UNIQUE(abbrev)
);
CREATE TABLE
COMMENT ON TABLE adscription IS 
	'Nombre de las adscripciones registradas';
COMMENT
COMMENT ON COLUMN adscription.administrative_id IS
	'ID administrativo de la adscripción en la universidad - Lo mantenemos
	únicamente como descripción en texto';
COMMENT
CREATE TABLE useradscription (
	id SERIAL,
	userjobposition_id int4 NOT NULL 
                         REFERENCES userjobposition(id)
                         ON UPDATE CASCADE
                         DEFERRABLE,
	adscription_id int4 NOT NULL 
                         REFERENCES adscription(id)
                         ON UPDATE CASCADE
                         DEFERRABLE,
	startmonth int4 NULL CHECK (startmonth<=12 AND startmonth>=1),
	startyear int4 NOT NULL,
	endmonth int4 NULL CHECK (endmonth<=12 AND endmonth>=1),
	endyear  int4 NULL,
	PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE useradscription IS 
	'Adscripción a la que pertenece un usuario en determinado periodo';
COMMENT
COMMENT ON COLUMN useradscription.startyear IS
	'El periodo aparece tanto aquí como en userjobposition ya que un 
	usuario puede cambiar de adscripción sin cambiar su categoría';
COMMENT
CREATE TABLE coursetype ( 
	id SERIAL NOT NULL,
	name text NOT NULL,
    	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE coursetype IS
	'Tipo de curso en cuesstión - Regular, especial, ...';
COMMENT
CREATE TABLE coursesduration (
	id serial NOT NULL,
	name text NOT NULL,
	days int4 NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE coursesduration IS
	'Duración de los periodos en que se imparten los cursos';
COMMENT
COMMENT ON COLUMN coursesduration.name IS
	'Nombre del periodo (semanal, mensual, trimestral, semestral, anual)';
COMMENT
COMMENT ON COLUMN coursesduration.days IS
	'Número de días dentro de este periodo';
COMMENT
CREATE TABLE coursegrouptype ( 
	id SERIAL NOT NULL,
	name text NOT NULL,
    	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE coursegrouptype IS
	'Tipo de agrupador de cursos (diplomado, certificación, etc.)';
COMMENT
CREATE TABLE coursegroup (
	id serial,
	name text,
    	coursegrouptype_id int4 NOT NULL 
                        REFERENCES coursegrouptype(id)
                        ON UPDATE CASCADE
                        DEFERRABLE,
	startyear int4 NOT NULL,
   	startmonth int4 NULL CHECK (startmonth >= 1 AND startmonth <= 12),
	endyear int4  NULL,
	endmonth int4 NULL CHECK (endmonth >= 1 AND endmonth <= 12),
	totalhours int4 NULL,
	PRIMARY KEY (id),
	UNIQUE (name),
	CONSTRAINT valid_duration CHECK (endyear IS NULL OR
		  (startyear * 12 + coalesce(startmonth,0)) > (endyear * 12 + coalesce(endmonth,0)))
);
CREATE TABLE
COMMENT ON TABLE coursegroup IS
	'Datos de un supercurso/agrupador de cursos';
COMMENT
COMMENT ON COLUMN coursegroup.totalhours IS
	'No tiene relación con coursesduration - Por ejemplo, un diplomado 
	puede durar 150 horas a lo largo de un mes, de un semestre, de años.';
COMMENT
CREATE TABLE courses (
    id SERIAL NOT NULL,
    title text NOT NULL,
    coursetype_id int4 NOT NULL 
                        REFERENCES coursetype(id)
                        ON UPDATE CASCADE
                        DEFERRABLE,
    academicdegrees_id int4 NULL 
                           REFERENCES academicdegrees(id)
                           ON UPDATE CASCADE
                           DEFERRABLE,
    hours int4 NULL,
    PRIMARY KEY(id),
    UNIQUE (title,  coursetype_id, academicdegrees_id )
);
CREATE TABLE
COMMENT ON TABLE courses IS
	'Cursos impartidos (de actualización o en un plan de estudios) y
	recibidos (de actualización - los de plan de estudios son historial
	académico - ver schooling)';
COMMENT
COMMENT ON COLUMN courses.hours IS
	'Las horas del curso serán calculadas basándonos en la duración
	del curso (usercourses) y la horas por semana (las cuales no
	serán guardadas en ningún campo, solo serviran como referencia
	en la aplicación.';
COMMENT
CREATE TABLE roleincourse (
	id SERIAL,
	name text NOT NULL,
	PRIMARY KEY (id),
	UNIQUE(name)
);
CREATE TABLE
COMMENT ON TABLE roleincourse IS
	'Rol del usaurio en el curso';
COMMENT
CREATE TABLE usercourses (
    id SERIAL,
    uid int4 NOT NULL 
            REFERENCES users(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
    courses_id int4 NULL 
            REFERENCES courses(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    coursegroup_id int4 NULL 
            REFERENCES coursegroup(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    roleincourse_id int4 NOT NULL 
            REFERENCES roleincourse(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    institution_id int4 NULL
		REFERENCES institutions(id)
		ON UPDATE CASCADE
		DEFERRABLE,
    country_id int4 NOT NULL 
              REFERENCES countries(id)
              ON UPDATE CASCADE
              DEFERRABLE,
    coursesduration_id int4 NOT NULL
              REFERENCES coursesduration(id)
              ON UPDATE CASCADE
              DEFERRABLE,
    modality_id int4 NOT NULL 
            REFERENCES modality(id)
            ON UPDATE CASCADE
            DEFERRABLE,
    hoursxweek int4 NULL,
    year int4 NOT NULL,
    month int4 NULL CHECK (month >= 1 AND month <= 12),
    location text NULL,
    acadprogram text NULL,
    other text NULL,
    PRIMARY KEY (id),
    CONSTRAINT either_course_or_group CHECK (courses_id IS NOT NULL OR
	coursegroup_id IS NOT NULL)
);
CREATE TABLE
COMMENT ON TABLE usercourses IS
	'Cursos a los que está asociado un usuario';
COMMENT
COMMENT ON COLUMN usercourses.acadprogram IS
	'Carrera o programa académico a que este curso pertenece';
COMMENT
CREATE TABLE usercredits (
   id SERIAL,
   uid integer 
       REFERENCES users(id)            
       ON UPDATE CASCADE               
           DEFERRABLE,
   internalusergive_id integer 
             REFERENCES users(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
   externalusergive_id integer 
            REFERENCES externalusers(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
   usergive_is_internal bool,
   other text NULL,
   year  int4 NOT NULL,
   month  smallint NULL,
   PRIMARY KEY (id),
   CHECK (usergive_is_internal = 't' OR
	(internalusergive_id IS NOT NULL AND externalusergive_id IS NULL)),
   CHECK (usergive_is_internal = 'f' OR
	(externalusergive_id IS NOT NULL AND internalusergive_id IS NULL))
);
CREATE TABLE
COMMENT ON TABLE usercredits IS 
	'Agradecimientos, créditos y reconocimientos por apoyo técnico';
COMMENT
COMMENT ON COLUMN usercredits.usergive_is_internal IS
	'Quien otorga el agradecimiento es usuario interno o externo? 
	Exige (NOT NULL) el tipo de usuario adecuado: externalusergive_id o
	internalusergive_id';
COMMENT
CREATE TABLE usercreditsarticles (
	id SERIAL,
	usercredits_id int4 NOT NULL
            REFERENCES usercredits(id)
            ON UPDATE CASCADE               
            DEFERRABLE,
	articles_id int4 NOT NULL
            REFERENCES articles(id)
            ON UPDATE CASCADE               
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (usercredits_id, articles_id)
);
CREATE TABLE
COMMENT ON TABLE usercreditsarticles IS
	'Artículos producto del trabajo que se está agradeciendo';
COMMENT
CREATE TABLE usercreditsbooks (
	id SERIAL,
	usercredits_id int4 NOT NULL
            REFERENCES usercredits(id)
            ON UPDATE CASCADE               
            DEFERRABLE,
	books_id int4 NOT NULL
            REFERENCES articles(id)
            ON UPDATE CASCADE               
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (usercredits_id, books_id)
);
CREATE TABLE
COMMENT ON TABLE usercreditsbooks IS
	'Libros producto del trabajo que se está agradeciendo';
COMMENT
CREATE TABLE usercreditschaptersbooks (
	id SERIAL,
	usercredits_id int4 NOT NULL
            REFERENCES usercredits(id)
            ON UPDATE CASCADE               
            DEFERRABLE,
	chaptersbooks_id int4 NOT NULL
            REFERENCES chaptersbooks(id)
            ON UPDATE CASCADE               
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (usercredits_id, chaptersbooks_id)
);
CREATE TABLE
COMMENT ON TABLE usercreditschaptersbooks IS
	'Capítulos en libro producto del trabajo que se está agradeciendo';
COMMENT
CREATE TABLE usercreditsconferencetalks (
	id SERIAL,
	usercredits_id int4 NOT NULL
            REFERENCES usercredits(id)
            ON UPDATE CASCADE               
            DEFERRABLE,
	conferencetalks_id int4 NOT NULL
            REFERENCES articles(id)
            ON UPDATE CASCADE               
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (usercredits_id, conferencetalks_id)
);
CREATE TABLE
COMMENT ON TABLE usercreditsconferencetalks IS
	'Conferencias producto del trabajo que se está agradeciendo';
COMMENT
CREATE TABLE usercreditsgenericworks (
	id SERIAL,
	usercredits_id int4 NOT NULL
            REFERENCES usercredits(id)
            ON UPDATE CASCADE               
            DEFERRABLE,
	genericworks_id int4 NOT NULL
            REFERENCES articles(id)
            ON UPDATE CASCADE               
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (usercredits_id, genericworks_id)
);
CREATE TABLE
COMMENT ON TABLE usercreditsgenericworks IS
	'Trabajos genéricos producto del trabajo que se está agradeciendo';
COMMENT
CREATE TABLE plan (
    id SERIAL,
    uid int4 NOT NULL
            REFERENCES users(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
    plan text NOT NULL,
    extendedinfo bytea NULL,
    year int4 NOT NULL,
    PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE plan IS
	'Plan de trabajo anual - Permite adjuntar un archivo binario';
COMMENT
CREATE TABLE selfevaluation (
    id SERIAL,
    uid int4 NOT NULL
            REFERENCES users(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
    plan text NOT NULL,
    year int4 NOT NULL,
    PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE selfevaluation IS
	'Auto-evaluación anual';
COMMENT
CREATE TABLE researchgroups (
	id SERIAL,
	name text NOT NULL,
	descr text NULL,
	moduser_id int4 NULL        
        	REFERENCES users(id)    
           	ON UPDATE CASCADE       
           	DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE researchgroups IS
	'Grupos de investigación';
COMMENT
CREATE TABLE groupmodalities (
	id SERIAL,
	name text NOT NULL,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE groupmodalities IS
	'Modalidad de un grupo de investigación';
COMMENT
CREATE TABLE researchgroupmodalities (
	id SERIAL,
	groupmodality_id smallint NULL 
                         REFERENCES groupmodalities(id)
                         ON UPDATE CASCADE
                         DEFERRABLE,
	researchgroup_id smallint NOT NULL 
                         REFERENCES researchgroups(id)
                         ON UPDATE CASCADE
                         DEFERRABLE,
	adscription_id smallint NULL 
                         REFERENCES adscription(id)
                         ON UPDATE CASCADE
                         DEFERRABLE,
	PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE researchgroupmodalities IS
	'Las entidades de la dependencia (o externas) relacionadas al proyeto
	cada una con su modalidad correspondiente';
COMMENT
CREATE TABLE userresearchgroups (
   id SERIAL,
   researchgroup_id integer NOT NULL 
            REFERENCES researchgroups(id)
            ON UPDATE CASCADE
            DEFERRABLE,
   year int4 NOT NULL,
   user_is_internal bool,
   externaluser_id integer 
            REFERENCES externalusers(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
   internaluser_id integer 
             REFERENCES users(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
   moduser_id int4 NULL    
           REFERENCES users(id)    
           ON UPDATE CASCADE       
           DEFERRABLE,
   PRIMARY KEY (id),
   UNIQUE (researchgroup_id, internaluser_id ),
   UNIQUE (researchgroup_id, externaluser_id ),
   CHECK (user_is_internal = 't' OR
	(internaluser_id IS NOT NULL AND externaluser_id IS NULL)),
   CHECK (user_is_internal = 'f' OR
	(externaluser_id IS NOT NULL AND internaluser_id IS NULL))
);
CREATE TABLE
COMMENT ON TABLE userresearchgroups IS
	'Grupos de investigación a los que pertenece un usuario (interno o
	externo)';
COMMENT
COMMENT ON COLUMN userresearchgroups.year IS
	'Año en que comenzó a participar en el grupo'
COMMENT
CREATE TABLE instadvicetarget (
	id SERIAL,
	name text NOT NULL,
        moduser_id int4 NULL    	     
            REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE instadvicetarget IS 
	'Destino de asesoría institucional';
COMMENT
CREATE TABLE indivadvicetarget (
	id SERIAL,
	name text NOT NULL,
        moduser_id int4 NULL    	     
            REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE indivadvicetarget IS
	'Tipo de persona que recibió asesoría individual';
COMMENT
CREATE TABLE indivadviceprogram (
	id SERIAL,
	name text NOT NULL,
        moduser_id int4 NULL    	     
            REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE indivadviceprogram IS
	'Tipo de programa a que pertenece la persona que recibió asesoría';
COMMENT
CREATE TABLE adviceactivity (
	id SERIAL,
	name text NOT NULL,
        moduser_id int4 NULL    	     
            REFERENCES users(id)             
            ON UPDATE CASCADE                
            DEFERRABLE,
	PRIMARY KEY (id),
	UNIQUE (name)
);
CREATE TABLE
COMMENT ON TABLE adviceactivity IS 
	'Actividades de la que constó una asesoría';
COMMENT
CREATE TABLE instadvice (
	id SERIAL,
	title text NOT NULL,
	acadprogram text NULL, 
	uid int4 NOT NULL 
            REFERENCES users(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
	institution_id int4 NOT NULL
            REFERENCES institutions(id)
            ON UPDATE CASCADE
            DEFERRABLE,
	instadvicetarget_id int4 NOT NULL 
            REFERENCES instadvicetarget(id)      
            ON UPDATE CASCADE
            DEFERRABLE,
	academicdegrees_id int4 NULL       
            REFERENCES academicdegrees(id)
            ON UPDATE CASCADE
            DEFERRABLE,
	other text NULL,
	year int4 NOT NULL,
	month int4 NULL CHECK (month >= 1 AND month <= 12),
	PRIMARY KEY (id)
);
CREATE TABLE
COMMENT ON TABLE instadvice IS 
	'Asesoría prestada por un académico a una institución';
COMMENT
CREATE TABLE instadviceactivity (
	id SERIAL,
	instadvice_id int4 NOT NULL
            REFERENCES instadvice(id)
            ON UPDATE CASCADE
            DEFERRABLE,
	adviceactivity_id int4 NOT NULL
            REFERENCES adviceactivity(id)
            ON UPDATE CASCADE
            DEFERRABLE,
	duration text NULL, 
	PRIMARY KEY (id),
	UNIQUE (instadvice_id, adviceactivity_id)
);
CREATE TABLE
COMMENT ON TABLE instadviceactivity IS 
	'Las actividades de las que constó una asesoría institucional';
COMMENT
CREATE TABLE indivadvice (
	id SERIAL,
	user_is_internal bool, 
	uid int4 NOT NULL 
            REFERENCES users(id)      
            ON UPDATE CASCADE
            ON DELETE CASCADE   
            DEFERRABLE,
	externaluser_id integer NULL 
            REFERENCES externalusers(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
	internaluser_id integer NULL
            REFERENCES users(id)            
            ON UPDATE CASCADE               
            DEFERRABLE,
	institution_id int4 NULL
            REFERENCES institutions(id)
            ON UPDATE CASCADE
            DEFERRABLE,
	indivadvicetarget_id int4 NOT NULL 
            REFERENCES instadvicetarget(id)      
            ON UPDATE CASCADE
            DEFERRABLE,
	indivadviceprogram_id int4 NULL 
            REFERENCES indivadviceprogram(id)      
            ON UPDATE CASCADE
            DEFERRABLE,
	academicdegrees_id int4 NULL       
            REFERENCES academicdegrees(id)
            ON UPDATE CASCADE
            DEFERRABLE,
	year int4 NOT NULL,
	month int4 NULL CHECK (month >= 1 AND month <= 12),
	hours int4 NOT NULL,
	other text NULL,
	PRIMARY KEY (id),
	CHECK (user_is_internal = 't' OR
		(internaluser_id IS NOT NULL AND externaluser_id IS NULL)),
	CHECK (user_is_internal = 'f' OR
		(externaluser_id IS NOT NULL AND internaluser_id IS NULL))
);
CREATE TABLE
COMMENT ON TABLE indivadvice IS 
	'Asesoría prestada por un académico a un individuo';
COMMENT
